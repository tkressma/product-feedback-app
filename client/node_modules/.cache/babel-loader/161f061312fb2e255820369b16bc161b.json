{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/UI/Forms/FormTextInput/FormTextInput.js\";\nimport styles from \"../FormInput.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FormTextInput(_ref) {\n  let {\n    inputId,\n    // The input id and label htmlFor value\n    value,\n    // The inner text value of the input being displayed\n    large = false,\n    // Whether or not the text box is multiple lines or a single line\n    labelHeading,\n    labelCaption,\n    onChange\n  } = _ref;\n  let textInput;\n\n  if (large) {\n    textInput = /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: inputId,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }, this);\n  } else {\n    textInput = /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      type: \"text\",\n      onChange: onChange,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  } // If the text input is large, then use a textarea instead of a input of type text.\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      className: styles[\"caption-bold\"],\n      children: labelHeading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      className: styles.caption,\n      children: labelCaption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), textInput]\n  }, void 0, true);\n}\n_c = FormTextInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTextInput\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/UI/Forms/FormTextInput/FormTextInput.js"],"names":["styles","FormTextInput","inputId","value","large","labelHeading","labelCaption","onChange","textInput","caption"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,yBAAnB;;;AACA,eAAe,SAASC,aAAT,OAOZ;AAAA,MAPmC;AACpCC,IAAAA,OADoC;AAC3B;AACTC,IAAAA,KAFoC;AAE7B;AACPC,IAAAA,KAAK,GAAG,KAH4B;AAGrB;AACfC,IAAAA,YAJoC;AAKpCC,IAAAA,YALoC;AAMpCC,IAAAA;AANoC,GAOnC;AACD,MAAIC,SAAJ;;AACA,MAAIJ,KAAJ,EAAW;AACTI,IAAAA,SAAS,gBAAG;AAAU,MAAA,EAAE,EAAEN,OAAd;AAAuB,MAAA,QAAQ,EAAEK;AAAjC;AAAA;AAAA;AAAA;AAAA,YAAZ;AACD,GAFD,MAEO;AACLC,IAAAA,SAAS,gBACP;AAAO,MAAA,EAAE,EAAEN,OAAX;AAAoB,MAAA,IAAI,EAAC,MAAzB;AAAgC,MAAA,QAAQ,EAAEK,QAA1C;AAAoD,MAAA,KAAK,EAAEJ;AAA3D;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GARA,CAUD;;;AACA,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAED,OAAhB;AAAyB,MAAA,SAAS,EAAEF,MAAM,CAAC,cAAD,CAA1C;AAAA,gBACGK;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAO,MAAA,OAAO,EAAEH,OAAhB;AAAyB,MAAA,SAAS,EAAEF,MAAM,CAACS,OAA3C;AAAA,gBACGH;AADH;AAAA;AAAA;AAAA;AAAA,YAJF,EAQGE,SARH;AAAA,kBADF;AAYD;KA9BuBP,a","sourcesContent":["import styles from \"../FormInput.module.css\";\nexport default function FormTextInput({\n  inputId, // The input id and label htmlFor value\n  value, // The inner text value of the input being displayed\n  large = false, // Whether or not the text box is multiple lines or a single line\n  labelHeading,\n  labelCaption,\n  onChange,\n}) {\n  let textInput;\n  if (large) {\n    textInput = <textarea id={inputId} onChange={onChange} />;\n  } else {\n    textInput = (\n      <input id={inputId} type=\"text\" onChange={onChange} value={value} />\n    );\n  }\n\n  // If the text input is large, then use a textarea instead of a input of type text.\n  return (\n    <>\n      <label htmlFor={inputId} className={styles[\"caption-bold\"]}>\n        {labelHeading}\n      </label>\n      <label htmlFor={inputId} className={styles.caption}>\n        {labelCaption}\n      </label>\n\n      {textInput}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}