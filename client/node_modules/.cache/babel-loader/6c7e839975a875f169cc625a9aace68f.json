{"ast":null,"code":"import _asyncToGenerator from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState}from\"react\";import styles from\"./AddCommentForm.module.css\";import{useDispatch}from\"react-redux\";import{useParams,Link}from\"react-router-dom\";import{commentSuggestion}from\"../../../../actions/suggestions\";import Button from\"../../../UI/Button/Button\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var AddCommentForm=function AddCommentForm(_ref){var updateComments=_ref.updateComments;var _useState=useState(225),_useState2=_slicedToArray(_useState,2),charsLeft=_useState2[0],setCharsLeft=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),comment=_useState4[0],setComment=_useState4[1];var isValid=charsLeft>0;// Is the comment valid (characters still available)?\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isEmpty=_useState6[0],setIsEmpty=_useState6[1];// Is the comment empty?\nvar user=JSON.parse(localStorage.getItem(\"profile\"));var dispatch=useDispatch();var _useParams=useParams(),id=_useParams.id;// Sends a comment to the back end, the refreshes the current suggestion's\n// comments to be immediately displayed on the front end. Then, it resets\n// the comment text area.\nvar handleAddComment=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var newComments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();if(charsLeft===225)setIsEmpty(true);if(!(charsLeft!==225&&isValid)){_context.next=9;break;}_context.next=5;return dispatch(commentSuggestion(comment,id));case 5:newComments=_context.sent;setComment(\"\");// Reset the comment\nsetCharsLeft(225);// Reset the character count\nupdateComments(newComments);// Refresh the comments to reflect the newly added comment\ncase 9:case\"end\":return _context.stop();}}},_callee);}));return function handleAddComment(_x){return _ref2.apply(this,arguments);};}();var handleCommentChange=function handleCommentChange(e){setCharsLeft(225-e.target.value.length);// Update comment field character count\nsetComment(e.target.value);// Update the comment to be posted by the user.\nsetIsEmpty(false);// If the comment is empty, and a user types something, update the empty state to be false.\n};return/*#__PURE__*/_jsxs(\"form\",{id:\"add-comment\",className:styles.comments,children:[!user&&/*#__PURE__*/_jsxs(\"h2\",{className:styles[\"comments_header\"],children:[/*#__PURE__*/_jsx(Link,{to:\"/auth\",children:\"Login\"}),\" to add a comment\"]}),user&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{className:styles[\"comments_header\"],children:\"Add a comment\"}),/*#__PURE__*/_jsx(\"textarea\",{className:\"\".concat(styles[\"comment_textarea\"],\" \").concat((isEmpty||!isValid)&&styles[\"comment_charcount--empty-error\"]),onChange:handleCommentChange,value:comment,\"aria-invalid\":isEmpty||!isValid,\"aria-required\":\"true\",\"aria-errormessage\":\"comment-error\",placeholder:\"Type your comment here...\"}),isEmpty&&/*#__PURE__*/_jsx(\"p\",{id:\"comment-error\",className:styles[\"comment_charcount--empty-message\"],children:\"Can't be empty\"}),!isValid&&/*#__PURE__*/_jsx(\"p\",{id:\"comment-error\",className:styles[\"comment_charcount--empty-message\"],children:\"Character limit exceeded\"}),/*#__PURE__*/_jsxs(\"div\",{className:styles[\"comment_details\"],children:[/*#__PURE__*/_jsxs(\"p\",{className:\"\".concat(styles[\"comment_charcount\"],\" \").concat(!isValid&&styles[\"comment_charcount--error\"]),children:[charsLeft,\" characters left\"]}),/*#__PURE__*/_jsx(Button,{btnStyle:isValid&&!isEmpty?\"violet\":\"disabled\",text:\"Post Comment\",form:\"add-comment\",\"aria-disabled\":!isValid,onClick:handleAddComment})]})]})]});};export default AddCommentForm;","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/CommentSection/AddCommentForm/AddCommentForm.js"],"names":["React","useState","styles","useDispatch","useParams","Link","commentSuggestion","Button","AddCommentForm","updateComments","charsLeft","setCharsLeft","comment","setComment","isValid","isEmpty","setIsEmpty","user","JSON","parse","localStorage","getItem","dispatch","id","handleAddComment","e","preventDefault","newComments","handleCommentChange","target","value","length","comments"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./AddCommentForm.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { commentSuggestion } from \"../../../../actions/suggestions\";\nimport Button from \"../../../UI/Button/Button\";\nconst AddCommentForm = ({ updateComments }) => {\n  const [charsLeft, setCharsLeft] = useState(225);\n  const [comment, setComment] = useState(\"\");\n  const isValid = charsLeft > 0; // Is the comment valid (characters still available)?\n  const [isEmpty, setIsEmpty] = useState(false); // Is the comment empty?\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  // Sends a comment to the back end, the refreshes the current suggestion's\n  // comments to be immediately displayed on the front end. Then, it resets\n  // the comment text area.\n  const handleAddComment = async (e) => {\n    e.preventDefault();\n\n    if (charsLeft === 225) setIsEmpty(true);\n\n    if (charsLeft !== 225 && isValid) {\n      const newComments = await dispatch(commentSuggestion(comment, id));\n      setComment(\"\"); // Reset the comment\n      setCharsLeft(225); // Reset the character count\n      updateComments(newComments); // Refresh the comments to reflect the newly added comment\n    }\n  };\n\n  const handleCommentChange = (e) => {\n    setCharsLeft(225 - e.target.value.length); // Update comment field character count\n    setComment(e.target.value); // Update the comment to be posted by the user.\n    setIsEmpty(false); // If the comment is empty, and a user types something, update the empty state to be false.\n  };\n\n  return (\n    <form id=\"add-comment\" className={styles.comments}>\n      {/* IF the user is not logged in, do not display the comment form. Instead, tell them to log in. */}\n      {!user && (\n        <h2 className={styles[\"comments_header\"]}>\n          <Link to=\"/auth\">Login</Link> to add a comment\n        </h2>\n      )}\n\n      {/* IF the user is logged in, allow them to comment. */}\n      {user && (\n        <>\n          <h2 className={styles[\"comments_header\"]}>Add a comment</h2>\n\n          {/* If there is an error with validation, outline the text area in red. */}\n          <textarea\n            className={`${styles[\"comment_textarea\"]} ${\n              (isEmpty || !isValid) && styles[\"comment_charcount--empty-error\"]\n            }`}\n            onChange={handleCommentChange}\n            value={comment}\n            aria-invalid={isEmpty || !isValid}\n            aria-required=\"true\"\n            aria-errormessage=\"comment-error\"\n            placeholder=\"Type your comment here...\"\n          />\n\n          {/* If there is no text, display a message saying the comment can't be empty. */}\n          {isEmpty && (\n            <p\n              id=\"comment-error\"\n              className={styles[\"comment_charcount--empty-message\"]}\n            >\n              Can't be empty\n            </p>\n          )}\n\n          {/* If there are no characters available in the char count, display a message saying too many chars. */}\n          {!isValid && (\n            <p\n              id=\"comment-error\"\n              className={styles[\"comment_charcount--empty-message\"]}\n            >\n              Character limit exceeded\n            </p>\n          )}\n\n          {/* Displays the character count (red if exceeding) and the Post Comment button (disabled if any errors) */}\n          <div className={styles[\"comment_details\"]}>\n            <p\n              className={`${styles[\"comment_charcount\"]} ${\n                !isValid && styles[\"comment_charcount--error\"]\n              }`}\n            >\n              {charsLeft} characters left\n            </p>\n\n            <Button\n              btnStyle={isValid && !isEmpty ? \"violet\" : \"disabled\"}\n              text=\"Post Comment\"\n              form=\"add-comment\"\n              aria-disabled={!isValid}\n              onClick={handleAddComment}\n            />\n          </div>\n        </>\n      )}\n    </form>\n  );\n};\n\nexport default AddCommentForm;\n"]},"metadata":{},"sourceType":"module"}