{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsFeed/Suggestion/UpvoteButton/UpvoteButton.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport styles from \"./UpvoteButton.module.css\";\nimport upvoteIcon from \"../../../../../../assets/shared/icon-arrow-up.svg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { upvoteSuggestion } from \"../../../../../../actions/suggestions\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpvoteButton = _ref => {\n  _s();\n\n  var _user$result;\n\n  let {\n    id\n  } = _ref;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    suggestion\n  } = useSelector(state => state.suggestions);\n  const upvotes = suggestion === null || suggestion === void 0 ? void 0 : suggestion.upvotes;\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  const [upvoteCount, setUpvoteCount] = useState(upvotes); // Checks to see if the current user ID has already upvoted the post.\n  // If the ID has not upvoted, add active styling to the upvote button.\n  // Else, remove active styling.\n\n  const userId = (user === null || user === void 0 ? void 0 : user.result.googleId) || (user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result._id);\n  const isUpvoted = upvotes.find(upvote => upvote === userId); // Retrieve the suggestion that is being upvoted\n\n  useEffect(() => {\n    dispatch(getSuggestion(id));\n  }, [id]);\n\n  const handleUpvote = async () => {\n    // If the user is not signed in, redirect to sign in/sign up\n    if (!user) {\n      navigate(\"/auth\");\n    } else {\n      dispatch(upvoteSuggestion(id));\n\n      if (isUpvoted) {\n        setUpvoteCount(upvotes.filter(upvoteId => upvoteId !== userId));\n      } else {\n        setUpvoteCount([...upvotes, userId]);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `${styles.upvote} ${isUpvoted && styles[\"upvote--active\"]}`,\n    onClick: handleUpvote,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: upvoteIcon,\n      alt: \"Upvote arrow\",\n      className: `${styles[\"upvote__icon\"]} ${isUpvoted && styles[\"upvote__icon--active\"]}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: upvoteCount.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpvoteButton, \"lnnHXOcTaC2UnbiV0EfdfkFvMdw=\", false, function () {\n  return [useDispatch, useNavigate, useSelector];\n});\n\n_c = UpvoteButton;\nexport default UpvoteButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpvoteButton\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsFeed/Suggestion/UpvoteButton/UpvoteButton.js"],"names":["useState","useEffect","styles","upvoteIcon","useDispatch","useSelector","upvoteSuggestion","useNavigate","UpvoteButton","id","dispatch","navigate","suggestion","state","suggestions","upvotes","user","JSON","parse","localStorage","getItem","upvoteCount","setUpvoteCount","userId","result","googleId","_id","isUpvoted","find","upvote","getSuggestion","handleUpvote","filter","upvoteId","length"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,UAAP,MAAuB,mDAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,QAAiC,uCAAjC;AACA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,MAAMC,YAAY,GAAG,QAAY;AAAA;;AAAA;;AAAA,MAAX;AAAEC,IAAAA;AAAF,GAAW;AAC/B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAiBP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAAlC;AACA,QAAMC,OAAO,GAAGH,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEG,OAA5B;AAEA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAACe,OAAD,CAA9C,CAR+B,CAU/B;AACA;AACA;;AACA,QAAMQ,MAAM,GAAG,CAAAP,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEQ,MAAN,CAAaC,QAAb,MAAyBT,IAAzB,aAAyBA,IAAzB,uCAAyBA,IAAI,CAAEQ,MAA/B,iDAAyB,aAAcE,GAAvC,CAAf;AACA,QAAMC,SAAS,GAAGZ,OAAO,CAACa,IAAR,CAAcC,MAAD,IAAYA,MAAM,KAAKN,MAApC,CAAlB,CAd+B,CAgB/B;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ,CAACoB,aAAa,CAACrB,EAAD,CAAd,CAAR;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;;AAIA,QAAMsB,YAAY,GAAG,YAAY;AAC/B;AACA,QAAI,CAACf,IAAL,EAAW;AACTL,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KAFD,MAEO;AACLD,MAAAA,QAAQ,CAACJ,gBAAgB,CAACG,EAAD,CAAjB,CAAR;;AAEA,UAAIkB,SAAJ,EAAe;AACbL,QAAAA,cAAc,CAACP,OAAO,CAACiB,MAAR,CAAgBC,QAAD,IAAcA,QAAQ,KAAKV,MAA1C,CAAD,CAAd;AACD,OAFD,MAEO;AACLD,QAAAA,cAAc,CAAC,CAAC,GAAGP,OAAJ,EAAaQ,MAAb,CAAD,CAAd;AACD;AACF;AACF,GAbD;;AAeA,sBACE;AACE,IAAA,SAAS,EAAG,GAAErB,MAAM,CAAC2B,MAAO,IAAGF,SAAS,IAAIzB,MAAM,CAAC,gBAAD,CAAmB,EADvE;AAEE,IAAA,OAAO,EAAE6B,YAFX;AAAA,4BAIE;AACE,MAAA,GAAG,EAAE5B,UADP;AAEE,MAAA,GAAG,EAAC,cAFN;AAGE,MAAA,SAAS,EAAG,GAAED,MAAM,CAAC,cAAD,CAAiB,IACnCyB,SAAS,IAAIzB,MAAM,CAAC,sBAAD,CACpB;AALH;AAAA;AAAA;AAAA;AAAA,YAJF,eAWE;AAAA,gBAAOmB,WAAW,CAACa;AAAnB;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAnDD;;GAAM1B,Y;UACaJ,W,EACAG,W,EAEMF,W;;;KAJnBG,Y;AAqDN,eAAeA,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport styles from \"./UpvoteButton.module.css\";\nimport upvoteIcon from \"../../../../../../assets/shared/icon-arrow-up.svg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { upvoteSuggestion } from \"../../../../../../actions/suggestions\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst UpvoteButton = ({ id }) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const { suggestion } = useSelector((state) => state.suggestions);\n  const upvotes = suggestion?.upvotes;\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  const [upvoteCount, setUpvoteCount] = useState(upvotes);\n\n  // Checks to see if the current user ID has already upvoted the post.\n  // If the ID has not upvoted, add active styling to the upvote button.\n  // Else, remove active styling.\n  const userId = user?.result.googleId || user?.result?._id;\n  const isUpvoted = upvotes.find((upvote) => upvote === userId);\n\n  // Retrieve the suggestion that is being upvoted\n  useEffect(() => {\n    dispatch(getSuggestion(id));\n  }, [id]);\n\n  const handleUpvote = async () => {\n    // If the user is not signed in, redirect to sign in/sign up\n    if (!user) {\n      navigate(\"/auth\");\n    } else {\n      dispatch(upvoteSuggestion(id));\n\n      if (isUpvoted) {\n        setUpvoteCount(upvotes.filter((upvoteId) => upvoteId !== userId));\n      } else {\n        setUpvoteCount([...upvotes, userId]);\n      }\n    }\n  };\n\n  return (\n    <button\n      className={`${styles.upvote} ${isUpvoted && styles[\"upvote--active\"]}`}\n      onClick={handleUpvote}\n    >\n      <img\n        src={upvoteIcon}\n        alt=\"Upvote arrow\"\n        className={`${styles[\"upvote__icon\"]} ${\n          isUpvoted && styles[\"upvote__icon--active\"]\n        }`}\n      />\n      <span>{upvoteCount.length}</span>\n    </button>\n  );\n};\n\nexport default UpvoteButton;\n"]},"metadata":{},"sourceType":"module"}