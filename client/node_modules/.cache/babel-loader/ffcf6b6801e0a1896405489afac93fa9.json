{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Create/Create.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createSuggestion } from \"../../actions/suggestions\";\nimport styles from \"./Create.module.css\";\nimport Heading from \"../UI/Heading/Heading\";\nimport Form from \"../UI/Forms/Form/Form\";\nimport FormTextInput from \"../UI/Forms/FormTextInput/FormTextInput\";\nimport FormSelectInput from \"../UI/Forms/FormSelectInput/FormSelectInput\";\nimport createIcon from \"../../assets/shared/icon-new-feedback.svg\";\nimport Button from \"../UI/Button/Button\";\nimport checkIcon from \"../../assets/shared/icon-check.svg\";\nimport { SpinnerCircularFixed } from \"spinners-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Create() {\n  _s();\n\n  const [newSuggestion, setNewSuggestion] = useState({\n    title: \"\",\n    category: \"Feature\",\n    status: \"suggestion\",\n    description: \"\",\n    upvotes: [],\n    comments: []\n  });\n  const [titleError, setTitleError] = useState(false);\n  const [descriptionError, setDecriptionError] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    isLoading\n  } = useSelector(state => state.suggestions);\n  const [submitted, setSubmitted] = useState(false); // Did the user submit the form?\n\n  const user = JSON.parse(localStorage.getItem(\"profile\")); // If a user is not logged in upon trying to access this form,\n  // redirect them to sign in/sign up.\n\n  useEffect(() => {\n    var _user$result;\n\n    if (!(user !== null && user !== void 0 && (_user$result = user.result) !== null && _user$result !== void 0 && _user$result.name)) {\n      navigate(\"/auth\");\n    }\n  }); // Displays a loading circle if the api call is still processing.\n  // Once finished, it will display a check mark.\n\n  const submissionConfirmation = isLoading ? /*#__PURE__*/_jsxDEV(SpinnerCircularFixed, {\n    color: \"hsl(230, 76%, 59%)\",\n    secondaryColor: \"#f2f5ff\",\n    style: {\n      height: 43.98,\n      margin: \"0 auto\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n    src: checkIcon,\n    className: styles[\"loading--check\"],\n    alt: \"Checkmark - action is completed\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this); // After the feedback is added, wait 1.5 seconds before redirecting\n  // back to the home page.\n\n  useEffect(() => {\n    if (!isLoading && submitted) {\n      let timerFunc = setTimeout(() => navigate(\"/\"), 1500);\n      return () => clearTimeout(timerFunc);\n    }\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const titleValidation = newSuggestion.title.length !== 0;\n    const descriptionValidation = newSuggestion.description.length !== 0;\n    setTitleError(!titleValidation ? true : false);\n    setDecriptionError(!descriptionValidation ? true : false);\n\n    if (titleValidation && descriptionValidation) {\n      var _user$result2, _user$result3, _user$result4;\n\n      setSubmitted(true);\n      dispatch(createSuggestion({ ...newSuggestion,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name,\n        // Add full name to suggestion data\n        username: user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.username,\n        // Add username to suggestion data\n        upvotes: [`${user === null || user === void 0 ? void 0 : (_user$result4 = user.result) === null || _user$result4 === void 0 ? void 0 : _user$result4._id}`] // Automatically upvote the user's own post\n\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    icon: createIcon,\n    backButtonDestination: \"/\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      type: \"h1\",\n      children: \"Create New Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(FormTextInput, {\n        inputId: \"title\",\n        value: newSuggestion.title,\n        labelHeading: \"Feedback Title\",\n        labelCaption: \"Add a short, descriptive headline\",\n        error: titleError,\n        onChange: event => setNewSuggestion({ ...newSuggestion,\n          title: event.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormSelectInput, {\n        inputId: \"category\",\n        labelHeading: \"Category\",\n        labelCaption: \"Choose a category for your feedback\",\n        onChange: option => {\n          setNewSuggestion({ ...newSuggestion,\n            category: option\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormTextInput, {\n        inputId: \"detail\",\n        value: newSuggestion.description,\n        large: \"true\",\n        labelHeading: \"Feedback Detail\",\n        labelCaption: \"Include any specific comments on what should be improved, added, etc.\",\n        error: descriptionError,\n        onChange: event => setNewSuggestion({ ...newSuggestion,\n          description: event.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"button__container\"],\n        children: submitted ? submissionConfirmation : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            btnStyle: \"violet\",\n            text: \"Add Feedback\",\n            form: \"form\",\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            btnStyle: \"navy-blue\",\n            text: \"Cancel\",\n            onClick: handleSubmit,\n            link: true,\n            destination: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Create, \"W3PlS6nnrvnO3v5uBbhsZxzzxSE=\", false, function () {\n  return [useDispatch, useNavigate, useSelector];\n});\n\n_c = Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Create/Create.js"],"names":["useEffect","useState","useDispatch","useSelector","useNavigate","createSuggestion","styles","Heading","Form","FormTextInput","FormSelectInput","createIcon","Button","checkIcon","SpinnerCircularFixed","Create","newSuggestion","setNewSuggestion","title","category","status","description","upvotes","comments","titleError","setTitleError","descriptionError","setDecriptionError","dispatch","navigate","isLoading","state","suggestions","submitted","setSubmitted","user","JSON","parse","localStorage","getItem","result","name","submissionConfirmation","height","margin","timerFunc","setTimeout","clearTimeout","handleSubmit","event","preventDefault","titleValidation","length","descriptionValidation","username","_id","target","value","option"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createSuggestion } from \"../../actions/suggestions\";\nimport styles from \"./Create.module.css\";\nimport Heading from \"../UI/Heading/Heading\";\nimport Form from \"../UI/Forms/Form/Form\";\nimport FormTextInput from \"../UI/Forms/FormTextInput/FormTextInput\";\nimport FormSelectInput from \"../UI/Forms/FormSelectInput/FormSelectInput\";\nimport createIcon from \"../../assets/shared/icon-new-feedback.svg\";\nimport Button from \"../UI/Button/Button\";\nimport checkIcon from \"../../assets/shared/icon-check.svg\";\n\nimport { SpinnerCircularFixed } from \"spinners-react\";\n\nexport default function Create() {\n  const [newSuggestion, setNewSuggestion] = useState({\n    title: \"\",\n    category: \"Feature\",\n    status: \"suggestion\",\n    description: \"\",\n    upvotes: [],\n    comments: [],\n  });\n\n  const [titleError, setTitleError] = useState(false);\n  const [descriptionError, setDecriptionError] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { isLoading } = useSelector((state) => state.suggestions);\n  const [submitted, setSubmitted] = useState(false); // Did the user submit the form?\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  // If a user is not logged in upon trying to access this form,\n  // redirect them to sign in/sign up.\n  useEffect(() => {\n    if (!user?.result?.name) {\n      navigate(\"/auth\");\n    }\n  });\n\n  // Displays a loading circle if the api call is still processing.\n  // Once finished, it will display a check mark.\n  const submissionConfirmation = isLoading ? (\n    <SpinnerCircularFixed\n      color=\"hsl(230, 76%, 59%)\"\n      secondaryColor=\"#f2f5ff\"\n      style={{ height: 43.98, margin: \"0 auto\" }}\n    />\n  ) : (\n    <img\n      src={checkIcon}\n      className={styles[\"loading--check\"]}\n      alt=\"Checkmark - action is completed\"\n    />\n  );\n\n  // After the feedback is added, wait 1.5 seconds before redirecting\n  // back to the home page.\n  useEffect(() => {\n    if (!isLoading && submitted) {\n      let timerFunc = setTimeout(() => navigate(\"/\"), 1500);\n      return () => clearTimeout(timerFunc);\n    }\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const titleValidation = newSuggestion.title.length !== 0;\n    const descriptionValidation = newSuggestion.description.length !== 0;\n\n    setTitleError(!titleValidation ? true : false);\n    setDecriptionError(!descriptionValidation ? true : false);\n\n    if (titleValidation && descriptionValidation) {\n      setSubmitted(true);\n      dispatch(\n        createSuggestion({\n          ...newSuggestion,\n          name: user?.result?.name, // Add full name to suggestion data\n          username: user?.result?.username, // Add username to suggestion data\n          upvotes: [`${user?.result?._id}`], // Automatically upvote the user's own post\n        })\n      );\n    }\n  };\n\n  return (\n    <Form icon={createIcon} backButtonDestination=\"/\">\n      <Heading type=\"h1\">Create New Feedback</Heading>\n\n      <form id=\"form\">\n        <FormTextInput\n          inputId=\"title\"\n          value={newSuggestion.title}\n          labelHeading=\"Feedback Title\"\n          labelCaption=\"Add a short, descriptive headline\"\n          error={titleError}\n          onChange={(event) =>\n            setNewSuggestion({ ...newSuggestion, title: event.target.value })\n          }\n        />\n        <FormSelectInput\n          inputId=\"category\"\n          labelHeading=\"Category\"\n          labelCaption=\"Choose a category for your feedback\"\n          onChange={(option) => {\n            setNewSuggestion({\n              ...newSuggestion,\n              category: option,\n            });\n          }}\n        />\n        <FormTextInput\n          inputId=\"detail\"\n          value={newSuggestion.description}\n          large=\"true\"\n          labelHeading=\"Feedback Detail\"\n          labelCaption=\"Include any specific comments on what should be improved, added, etc.\"\n          error={descriptionError}\n          onChange={(event) =>\n            setNewSuggestion({\n              ...newSuggestion,\n              description: event.target.value,\n            })\n          }\n        />\n\n        <div className={styles[\"button__container\"]}>\n          {submitted ? (\n            submissionConfirmation\n          ) : (\n            <>\n              <Button\n                btnStyle=\"violet\"\n                text=\"Add Feedback\"\n                form=\"form\"\n                onClick={handleSubmit}\n              />\n\n              <Button\n                btnStyle=\"navy-blue\"\n                text=\"Cancel\"\n                onClick={handleSubmit}\n                link={true}\n                destination=\"/\"\n              />\n            </>\n          )}\n        </div>\n      </form>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}