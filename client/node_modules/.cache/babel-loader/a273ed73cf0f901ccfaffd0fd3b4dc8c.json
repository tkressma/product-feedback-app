{"ast":null,"code":"import { FETCH_FILTERED, FETCH_SUGGESTION, CREATE_SUGGESTION, UPDATE_SUGGESTION, DELETE_SUGGESTION, UPVOTE, COMMENT, REPLY, START_LOADING, END_LOADING, CHANGE_FILTERS } from \"../constants/actionTypes\";\nimport * as api from \"../api\"; // Action Creators - Must use redux thunk since we are working with asynchronous data\n\nexport const getSuggestion = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchSuggestion(id);\n    dispatch({\n      type: FETCH_SUGGESTION,\n      payload: {\n        suggestion: data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createSuggestion = newSuggestion => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createSuggestion(newSuggestion);\n    dispatch({\n      type: CREATE_SUGGESTION,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updateSuggestion = (id, formData) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.updateSuggestion(id, formData);\n    dispatch({\n      type: UPDATE_SUGGESTION,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deleteSuggestion = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    await api.deleteSuggestion(id);\n    dispatch({\n      type: DELETE_SUGGESTION,\n      payload: id\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; // Returns suggestions that meet filter criteria (category, type, and order)\n// Category - All, UI, UX, Enhancement, Bug, Feature\n// Type - Upvotes or Comments\n// Order - Ascending (Least) or Descending (Most)\n\nexport const filterSuggestions = _ref => {\n  let {\n    category,\n    type,\n    order\n  } = _ref;\n  return async dispatch => {\n    try {\n      dispatch({\n        type: START_LOADING\n      });\n      const {\n        data\n      } = await api.fetchFilteredSuggestions(category, type, order);\n      dispatch({\n        type: FETCH_FILTERED,\n        payload: data\n      });\n      dispatch({\n        type: END_LOADING\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}; // Updates the filters currently selected by the user. This allows for\n// the search to work synchronously despite being in two seperate components.\n// Category component - SuggestionTag.js\n// Upvotes and Comments sort component - SuggestionsBar.js\n\nexport const setFilters = filters => async dispatch => {\n  dispatch({\n    type: CHANGE_FILTERS,\n    payload: filters\n  });\n};\nexport const upvoteSuggestion = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.upvoteSuggestion(id);\n    dispatch({\n      type: UPVOTE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nconst generateGoogleUsername = () => {\n  var _user, _currentUser;\n\n  return ((_user = user) === null || _user === void 0 ? void 0 : _user.result.name.split(\" \").join(\"\").toLowerCase()) + String((_currentUser = currentUser) === null || _currentUser === void 0 ? void 0 : _currentUser.result.googleId).slice(0, 3);\n};\n\nexport const commentSuggestion = (comment, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.commentSuggestion(comment, id);\n    dispatch({\n      type: COMMENT,\n      payload: data\n    });\n    return data.comments; // Return all the comments on the suggestion to reflect comment changes on the front end\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const replyToComment = (comment, id, parentCommentId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.replyToComment(comment, id, parentCommentId);\n    dispatch({\n      type: REPLY,\n      payload: data\n    });\n    return data.comments.find(comment => comment._id === parentCommentId).replies;\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/actions/suggestions.js"],"names":["FETCH_FILTERED","FETCH_SUGGESTION","CREATE_SUGGESTION","UPDATE_SUGGESTION","DELETE_SUGGESTION","UPVOTE","COMMENT","REPLY","START_LOADING","END_LOADING","CHANGE_FILTERS","api","getSuggestion","id","dispatch","type","data","fetchSuggestion","payload","suggestion","error","console","log","message","createSuggestion","newSuggestion","updateSuggestion","formData","deleteSuggestion","filterSuggestions","category","order","fetchFilteredSuggestions","setFilters","filters","upvoteSuggestion","generateGoogleUsername","user","result","name","split","join","toLowerCase","String","currentUser","googleId","slice","commentSuggestion","comment","comments","replyToComment","parentCommentId","find","_id","replies"],"mappings":"AAAA,SACEA,cADF,EAEEC,gBAFF,EAGEC,iBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,MANF,EAOEC,OAPF,EAQEC,KARF,EASEC,aATF,EAUEC,WAVF,EAWEC,cAXF,QAYO,0BAZP;AAaA,OAAO,KAAKC,GAAZ,MAAqB,QAArB,C,CAEA;;AAEA,OAAO,MAAMC,aAAa,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACvD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACM,eAAJ,CAAoBJ,EAApB,CAAvB;AAEAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEd,gBAAR;AAA0BiB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,UAAU,EAAEH;AAAd;AAAnC,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACD,GAND,CAME,OAAOW,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAVM;AAYP,OAAO,MAAMC,gBAAgB,GAAIC,aAAD,IAAmB,MAAOX,QAAP,IAAoB;AACrE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACa,gBAAJ,CAAqBC,aAArB,CAAvB;AACAX,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEb,iBAAR;AAA2BgB,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOW,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CATM;AAWP,OAAO,MAAMG,gBAAgB,GAAG,CAACb,EAAD,EAAKc,QAAL,KAAkB,MAAOb,QAAP,IAAoB;AACpE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACe,gBAAJ,CAAqBb,EAArB,EAAyBc,QAAzB,CAAvB;AACAb,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ,iBAAR;AAA2Be,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOW,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CATM;AAWP,OAAO,MAAMK,gBAAgB,GAAIf,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AAC1D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AACA,UAAMG,GAAG,CAACiB,gBAAJ,CAAqBf,EAArB,CAAN;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX,iBAAR;AAA2Bc,MAAAA,OAAO,EAAEL;AAApC,KAAD,CAAR;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOW,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CATM,C,CAWP;AACA;AACA;AACA;;AACA,OAAO,MAAMM,iBAAiB,GAC5B;AAAA,MAAC;AAAEC,IAAAA,QAAF;AAAYf,IAAAA,IAAZ;AAAkBgB,IAAAA;AAAlB,GAAD;AAAA,SACA,MAAOjB,QAAP,IAAoB;AAClB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEP;AAAR,OAAD,CAAR;AAEA,YAAM;AAAEQ,QAAAA;AAAF,UAAW,MAAML,GAAG,CAACqB,wBAAJ,CACrBF,QADqB,EAErBf,IAFqB,EAGrBgB,KAHqB,CAAvB;AAMAjB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEf,cAAR;AAAwBkB,QAAAA,OAAO,EAAEF;AAAjC,OAAD,CAAR;AACAF,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEN;AAAR,OAAD,CAAR;AACD,KAXD,CAWE,OAAOW,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,GAhBD;AAAA,CADK,C,CAmBP;AACA;AACA;AACA;;AACA,OAAO,MAAMU,UAAU,GAAIC,OAAD,IAAa,MAAOpB,QAAP,IAAoB;AACzDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL,cAAR;AAAwBQ,IAAAA,OAAO,EAAEgB;AAAjC,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAItB,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACwB,gBAAJ,CAAqBtB,EAArB,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV,MAAR;AAAgBa,MAAAA,OAAO,EAAEF;AAAzB,KAAD,CAAR;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAPM;;AASP,MAAMa,sBAAsB,GAAG,MAAM;AAAA;;AACnC,SACE,UAAAC,IAAI,UAAJ,sCAAMC,MAAN,CAAaC,IAAb,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6BC,IAA7B,CAAkC,EAAlC,EAAsCC,WAAtC,MACAC,MAAM,iBAACC,WAAD,iDAAC,aAAaN,MAAb,CAAoBO,QAArB,CAAN,CAAqCC,KAArC,CAA2C,CAA3C,EAA8C,CAA9C,CAFF;AAID,CALD;;AAOA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,OAAD,EAAUnC,EAAV,KAAiB,MAAOC,QAAP,IAAoB;AACpE,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACoC,iBAAJ,CAAsBC,OAAtB,EAA+BnC,EAA/B,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,OAAR;AAAiBY,MAAAA,OAAO,EAAEF;AAA1B,KAAD,CAAR;AACA,WAAOA,IAAI,CAACiC,QAAZ,CAHE,CAGoB;AACvB,GAJD,CAIE,OAAO7B,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CARM;AAUP,OAAO,MAAM2B,cAAc,GACzB,CAACF,OAAD,EAAUnC,EAAV,EAAcsC,eAAd,KAAkC,MAAOrC,QAAP,IAAoB;AACpD,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAML,GAAG,CAACuC,cAAJ,CAAmBF,OAAnB,EAA4BnC,EAA5B,EAAgCsC,eAAhC,CAAvB;AACArC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,KAAR;AAAeW,MAAAA,OAAO,EAAEF;AAAxB,KAAD,CAAR;AACA,WAAOA,IAAI,CAACiC,QAAL,CAAcG,IAAd,CAAoBJ,OAAD,IAAaA,OAAO,CAACK,GAAR,KAAgBF,eAAhD,EACJG,OADH;AAED,GALD,CAKE,OAAOlC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAVI","sourcesContent":["import {\n  FETCH_FILTERED,\n  FETCH_SUGGESTION,\n  CREATE_SUGGESTION,\n  UPDATE_SUGGESTION,\n  DELETE_SUGGESTION,\n  UPVOTE,\n  COMMENT,\n  REPLY,\n  START_LOADING,\n  END_LOADING,\n  CHANGE_FILTERS,\n} from \"../constants/actionTypes\";\nimport * as api from \"../api\";\n\n// Action Creators - Must use redux thunk since we are working with asynchronous data\n\nexport const getSuggestion = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchSuggestion(id);\n\n    dispatch({ type: FETCH_SUGGESTION, payload: { suggestion: data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const createSuggestion = (newSuggestion) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createSuggestion(newSuggestion);\n    dispatch({ type: CREATE_SUGGESTION, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const updateSuggestion = (id, formData) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.updateSuggestion(id, formData);\n    dispatch({ type: UPDATE_SUGGESTION, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const deleteSuggestion = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    await api.deleteSuggestion(id);\n    dispatch({ type: DELETE_SUGGESTION, payload: id });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// Returns suggestions that meet filter criteria (category, type, and order)\n// Category - All, UI, UX, Enhancement, Bug, Feature\n// Type - Upvotes or Comments\n// Order - Ascending (Least) or Descending (Most)\nexport const filterSuggestions =\n  ({ category, type, order }) =>\n  async (dispatch) => {\n    try {\n      dispatch({ type: START_LOADING });\n\n      const { data } = await api.fetchFilteredSuggestions(\n        category,\n        type,\n        order\n      );\n\n      dispatch({ type: FETCH_FILTERED, payload: data });\n      dispatch({ type: END_LOADING });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n// Updates the filters currently selected by the user. This allows for\n// the search to work synchronously despite being in two seperate components.\n// Category component - SuggestionTag.js\n// Upvotes and Comments sort component - SuggestionsBar.js\nexport const setFilters = (filters) => async (dispatch) => {\n  dispatch({ type: CHANGE_FILTERS, payload: filters });\n};\n\nexport const upvoteSuggestion = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.upvoteSuggestion(id);\n    dispatch({ type: UPVOTE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nconst generateGoogleUsername = () => {\n  return (\n    user?.result.name.split(\" \").join(\"\").toLowerCase() +\n    String(currentUser?.result.googleId).slice(0, 3)\n  );\n};\n\nexport const commentSuggestion = (comment, id) => async (dispatch) => {\n  try {\n    const { data } = await api.commentSuggestion(comment, id);\n    dispatch({ type: COMMENT, payload: data });\n    return data.comments; // Return all the comments on the suggestion to reflect comment changes on the front end\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const replyToComment =\n  (comment, id, parentCommentId) => async (dispatch) => {\n    try {\n      const { data } = await api.replyToComment(comment, id, parentCommentId);\n      dispatch({ type: REPLY, payload: data });\n      return data.comments.find((comment) => comment._id === parentCommentId)\n        .replies;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}