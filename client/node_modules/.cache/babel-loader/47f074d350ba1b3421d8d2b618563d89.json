{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/SuggestionPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Suggestion from \"../Home/Main/SuggestionsFeed/Suggestion/Suggestion\";\nimport { getSuggestion } from \"../../actions/suggestions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SuggestionPage() {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams(); // Retrieve the data for the suggestion being viewed\n\n  const {\n    suggestion,\n    isLoading\n  } = useSelector(state => state.suggestions); // If a user is not logged in upon trying to access this form,\n  // redirect them to sign in/sign up.\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  useEffect(() => {\n    var _user$result;\n\n    if (!(user !== null && user !== void 0 && (_user$result = user.result) !== null && _user$result !== void 0 && _user$result.name)) {\n      navigate(\"/auth\");\n    }\n  }); // Retrieve the suggestion that is being edited\n\n  useEffect(() => {\n    dispatch(getSuggestion(id));\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(Suggestion, {\n      suggestionData: suggestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SuggestionPage, \"xUlYmA/t9wOL7sRqlysMv7oL7h0=\", false, function () {\n  return [useDispatch, useNavigate, useParams, useSelector];\n});\n\n_c = SuggestionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestionPage\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/SuggestionPage.js"],"names":["React","useEffect","useDispatch","useSelector","useNavigate","useParams","Suggestion","getSuggestion","SuggestionPage","dispatch","navigate","id","suggestion","isLoading","state","suggestions","user","JSON","parse","localStorage","getItem","result","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,SAASC,aAAT,QAA8B,2BAA9B;;AACA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AACvC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAASN,SAAS,EAAxB,CAHuC,CAIvC;;AACA,QAAM;AAAEO,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4BV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAA7C,CALuC,CAOvC;AACA;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb;AACAnB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,QAAI,EAACe,IAAD,aAACA,IAAD,+BAACA,IAAI,CAAEK,MAAP,yCAAC,aAAcC,IAAf,CAAJ,EAAyB;AACvBZ,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACD;AACF,GAJQ,CAAT,CAVuC,CAgBvC;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACF,aAAa,CAACI,EAAD,CAAd,CAAR;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT;AAGA,sBACE;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,cAAc,EAAEC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAzBuBJ,c;UACLN,W,EACAE,W,EACFC,S,EAEmBF,W;;;KALZK,c","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Suggestion from \"../Home/Main/SuggestionsFeed/Suggestion/Suggestion\";\nimport { getSuggestion } from \"../../actions/suggestions\";\nexport default function SuggestionPage() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  // Retrieve the data for the suggestion being viewed\n  const { suggestion, isLoading } = useSelector((state) => state.suggestions);\n\n  // If a user is not logged in upon trying to access this form,\n  // redirect them to sign in/sign up.\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  useEffect(() => {\n    if (!user?.result?.name) {\n      navigate(\"/auth\");\n    }\n  });\n\n  // Retrieve the suggestion that is being edited\n  useEffect(() => {\n    dispatch(getSuggestion(id));\n  }, [id]);\n  return (\n    <main>\n      <Suggestion suggestionData={suggestion} />\n    </main>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}