{"ast":null,"code":"import React from\"react\";import styles from\"./SuggestionsFeed.module.css\";import{useSelector}from\"react-redux\";import Suggestion from\"./Suggestion/Suggestion\";import NoSuggestions from\"./NoSuggestions.js/NoSuggestions\";import{SpinnerCircularFixed}from\"spinners-react\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function SuggestionsFeed(){// Retrieves all of the suggestions\nvar _useSelector=useSelector(function(state){return state.suggestions;}),suggestions=_useSelector.suggestions,isLoading=_useSelector.isLoading;// If there is one or more suggestions in the state array and the api\n// request has finished loading, then there are suggestions available to display\nvar suggestionsAvailable=suggestions.length!==0;// If there are no suggestions, apply different styling to the section\nvar suggestionFeedStyling=suggestionsAvailable?styles.suggestions:styles[\"suggetions--empty\"];// Dynamically create all suggestion components to be rendered on the page\nvar suggestionCards=suggestions.map(function(suggestion){return/*#__PURE__*/_jsx(Suggestion,{suggestionData:suggestion},suggestion[\"_id\"]);});// If isLoading is true, display a loading symbol.\n// As long as there are suggestions, display all of the available suggestion components.\n// If suggestionsAvailable is false, display the no suggestions component.\nvar feed=isLoading?/*#__PURE__*/_jsx(SpinnerCircularFixed,{color:\"hsl(230, 76%, 59%)\",secondaryColor:\"#f2f5ff\",size:100,style:{display:\"block\",margin:\"4rem auto\"}}):/*#__PURE__*/_jsx(\"section\",{className:suggestionFeedStyling,children:suggestionsAvailable?!isLoading&&suggestionCards:!isLoading&&/*#__PURE__*/_jsx(NoSuggestions,{})});return feed;}","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsFeed/SuggestionsFeed.js"],"names":["React","styles","useSelector","Suggestion","NoSuggestions","SpinnerCircularFixed","SuggestionsFeed","state","suggestions","isLoading","suggestionsAvailable","length","suggestionFeedStyling","suggestionCards","map","suggestion","feed","display","margin"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,8BAAnB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,kCAA1B,CACA,OAASC,oBAAT,KAAqC,gBAArC,C,2CAEA,cAAe,SAASC,CAAAA,eAAT,EAA2B,CACxC;AACA,iBAAmCJ,WAAW,CAAC,SAACK,KAAD,QAAWA,CAAAA,KAAK,CAACC,WAAjB,EAAD,CAA9C,CAAQA,WAAR,cAAQA,WAAR,CAAqBC,SAArB,cAAqBA,SAArB,CAEA;AACA;AACA,GAAMC,CAAAA,oBAAoB,CAAGF,WAAW,CAACG,MAAZ,GAAuB,CAApD,CAEA;AACA,GAAMC,CAAAA,qBAAqB,CAAGF,oBAAoB,CAC9CT,MAAM,CAACO,WADuC,CAE9CP,MAAM,CAAC,mBAAD,CAFV,CAIA;AACA,GAAMY,CAAAA,eAAe,CAAGL,WAAW,CAACM,GAAZ,CAAgB,SAACC,UAAD,qBACtC,KAAC,UAAD,EAAoC,cAAc,CAAEA,UAApD,EAAiBA,UAAU,CAAC,KAAD,CAA3B,CADsC,EAAhB,CAAxB,CAIA;AACA;AACA;AACA,GAAMC,CAAAA,IAAI,CAAGP,SAAS,cACpB,KAAC,oBAAD,EACE,KAAK,CAAC,oBADR,CAEE,cAAc,CAAC,SAFjB,CAGE,IAAI,CAAE,GAHR,CAIE,KAAK,CAAE,CACLQ,OAAO,CAAE,OADJ,CAELC,MAAM,CAAE,WAFH,CAJT,EADoB,cAWpB,gBAAS,SAAS,CAAEN,qBAApB,UACGF,oBAAoB,CACjB,CAACD,SAAD,EAAcI,eADG,CAEjB,CAACJ,SAAD,eAAc,KAAC,aAAD,IAHpB,EAXF,CAkBA,MAAOO,CAAAA,IAAP,CACD","sourcesContent":["import React from \"react\";\nimport styles from \"./SuggestionsFeed.module.css\";\nimport { useSelector } from \"react-redux\";\nimport Suggestion from \"./Suggestion/Suggestion\";\nimport NoSuggestions from \"./NoSuggestions.js/NoSuggestions\";\nimport { SpinnerCircularFixed } from \"spinners-react\";\n\nexport default function SuggestionsFeed() {\n  // Retrieves all of the suggestions\n  const { suggestions, isLoading } = useSelector((state) => state.suggestions);\n\n  // If there is one or more suggestions in the state array and the api\n  // request has finished loading, then there are suggestions available to display\n  const suggestionsAvailable = suggestions.length !== 0;\n\n  // If there are no suggestions, apply different styling to the section\n  const suggestionFeedStyling = suggestionsAvailable\n    ? styles.suggestions\n    : styles[\"suggetions--empty\"];\n\n  // Dynamically create all suggestion components to be rendered on the page\n  const suggestionCards = suggestions.map((suggestion) => (\n    <Suggestion key={suggestion[\"_id\"]} suggestionData={suggestion} />\n  ));\n\n  // If isLoading is true, display a loading symbol.\n  // As long as there are suggestions, display all of the available suggestion components.\n  // If suggestionsAvailable is false, display the no suggestions component.\n  const feed = isLoading ? (\n    <SpinnerCircularFixed\n      color=\"hsl(230, 76%, 59%)\"\n      secondaryColor=\"#f2f5ff\"\n      size={100}\n      style={{\n        display: \"block\",\n        margin: \"4rem auto\",\n      }}\n    />\n  ) : (\n    <section className={suggestionFeedStyling}>\n      {suggestionsAvailable\n        ? !isLoading && suggestionCards\n        : !isLoading && <NoSuggestions />}\n    </section>\n  );\n\n  return feed;\n}\n"]},"metadata":{},"sourceType":"module"}