{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/UI/Forms/FormTextInput/FormTextInput.js\";\nimport styles from \"../FormInput.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FormTextInput(_ref) {\n  let {\n    inputId,\n    // The input id and label htmlFor value\n    value,\n    // The inner text value of the input being displayed\n    large = false,\n    // Whether or not the text box is multiple lines or a single line\n    type = \"text\",\n    error,\n    // Is the input text valid?\n    labelHeading,\n    labelCaption,\n    onChange\n  } = _ref;\n  let textInput;\n\n  if (large) {\n    textInput = /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: inputId,\n      \"aria-invalid\": error,\n      \"aria-required\": \"true\",\n      \"aria-errormessage\": \"validation-error\",\n      onChange: onChange,\n      value: value,\n      className: error ? styles.error : undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  } else {\n    textInput = /*#__PURE__*/_jsxDEV(\"input\", {\n      id: inputId,\n      \"aria-invalid\": error,\n      \"aria-required\": \"true\",\n      \"aria-errormessage\": \"validation-error\",\n      type: type,\n      onChange: onChange,\n      value: value,\n      className: error ? styles.error : undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  } // If the text input is large, then use a textarea instead of a input of type text.\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      className: styles[\"caption-bold\"],\n      children: labelHeading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      className: styles.caption,\n      children: labelCaption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), textInput, error && /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"validation-error\",\n      className: styles[\"error_message\"],\n      children: \"Can't be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_c = FormTextInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormTextInput\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/UI/Forms/FormTextInput/FormTextInput.js"],"names":["styles","FormTextInput","inputId","value","large","type","error","labelHeading","labelCaption","onChange","textInput","undefined","caption"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,yBAAnB;;;AACA,eAAe,SAASC,aAAT,OASZ;AAAA,MATmC;AACpCC,IAAAA,OADoC;AAC3B;AACTC,IAAAA,KAFoC;AAE7B;AACPC,IAAAA,KAAK,GAAG,KAH4B;AAGrB;AACfC,IAAAA,IAAI,GAAG,MAJ6B;AAKpCC,IAAAA,KALoC;AAK7B;AACPC,IAAAA,YANoC;AAOpCC,IAAAA,YAPoC;AAQpCC,IAAAA;AARoC,GASnC;AACD,MAAIC,SAAJ;;AACA,MAAIN,KAAJ,EAAW;AACTM,IAAAA,SAAS,gBACP;AACE,MAAA,EAAE,EAAER,OADN;AAEE,sBAAcI,KAFhB;AAGE,uBAAc,MAHhB;AAIE,2BAAkB,kBAJpB;AAKE,MAAA,QAAQ,EAAEG,QALZ;AAME,MAAA,KAAK,EAAEN,KANT;AAOE,MAAA,SAAS,EAAEG,KAAK,GAAGN,MAAM,CAACM,KAAV,GAAkBK;AAPpC;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAZD,MAYO;AACLD,IAAAA,SAAS,gBACP;AACE,MAAA,EAAE,EAAER,OADN;AAEE,sBAAcI,KAFhB;AAGE,uBAAc,MAHhB;AAIE,2BAAkB,kBAJpB;AAKE,MAAA,IAAI,EAAED,IALR;AAME,MAAA,QAAQ,EAAEI,QANZ;AAOE,MAAA,KAAK,EAAEN,KAPT;AAQE,MAAA,SAAS,EAAEG,KAAK,GAAGN,MAAM,CAACM,KAAV,GAAkBK;AARpC;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GA3BA,CA6BD;;;AACA,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAET,OAAhB;AAAyB,MAAA,SAAS,EAAEF,MAAM,CAAC,cAAD,CAA1C;AAAA,gBACGO;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAO,MAAA,OAAO,EAAEL,OAAhB;AAAyB,MAAA,SAAS,EAAEF,MAAM,CAACY,OAA3C;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA,YAJF,EAQGE,SARH,EAUGJ,KAAK,iBACJ;AAAG,MAAA,EAAE,EAAC,kBAAN;AAAyB,MAAA,SAAS,EAAEN,MAAM,CAAC,eAAD,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA,kBADF;AAkBD;KAzDuBC,a","sourcesContent":["import styles from \"../FormInput.module.css\";\nexport default function FormTextInput({\n  inputId, // The input id and label htmlFor value\n  value, // The inner text value of the input being displayed\n  large = false, // Whether or not the text box is multiple lines or a single line\n  type = \"text\",\n  error, // Is the input text valid?\n  labelHeading,\n  labelCaption,\n  onChange,\n}) {\n  let textInput;\n  if (large) {\n    textInput = (\n      <textarea\n        id={inputId}\n        aria-invalid={error}\n        aria-required=\"true\"\n        aria-errormessage=\"validation-error\"\n        onChange={onChange}\n        value={value}\n        className={error ? styles.error : undefined}\n      />\n    );\n  } else {\n    textInput = (\n      <input\n        id={inputId}\n        aria-invalid={error}\n        aria-required=\"true\"\n        aria-errormessage=\"validation-error\"\n        type={type}\n        onChange={onChange}\n        value={value}\n        className={error ? styles.error : undefined}\n      />\n    );\n  }\n\n  // If the text input is large, then use a textarea instead of a input of type text.\n  return (\n    <>\n      <label htmlFor={inputId} className={styles[\"caption-bold\"]}>\n        {labelHeading}\n      </label>\n      <label htmlFor={inputId} className={styles.caption}>\n        {labelCaption}\n      </label>\n\n      {textInput}\n\n      {error && (\n        <p id=\"validation-error\" className={styles[\"error_message\"]}>\n          Can't be empty\n        </p>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}