{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/AddCommentForm/AddCommentForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"../CommentSection/Comments/Comments.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { commentSuggestion } from \"../../../actions/suggestions\";\nimport Button from \"../../UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddCommentForm = _ref => {\n  _s();\n\n  let {\n    updateComments\n  } = _ref;\n  const [charsLeft, setCharsLeft] = useState(225);\n  const [comment, setComment] = useState(\"\");\n  const isValid = charsLeft > 0; // Is the comment valid (characters still available)?\n\n  const [isEmpty, setIsEmpty] = useState(false); // Is the comment empty?\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams(); // Sends a comment to the back end, the refreshes the current suggestion's\n  // comments to be immediately displayed on the front end. Then, it resets\n  // the comment text area.\n\n  const handleAddComment = async e => {\n    e.preventDefault();\n    if (charsLeft === 225) setIsEmpty(true);\n\n    if (charsLeft !== 225 && isValid) {\n      const newComments = await dispatch(commentSuggestion(comment, id));\n      setComment(\"\"); // Reset the comment\n\n      setCharsLeft(225); // Reset the character count\n\n      updateComments(newComments); // Refresh the comments to reflect the newly added comment\n    }\n  };\n\n  const handleCommentChange = e => {\n    setCharsLeft(225 - e.target.value.length); // Update comment field character count\n\n    setComment(e.target.value); // Update the comment to be posted by the user.\n\n    setIsEmpty(false); // If the comment is empty, and a user types something, update the empty state to be false.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"add-comment\",\n    className: styles.comments,\n    children: [!user && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles[\"comments_header\"],\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/auth\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), \" to add a comment\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), user && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: styles[\"comments_header\"],\n        children: \"Add a comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: `${styles[\"comment_textarea\"]} ${(isEmpty || !isValid) && styles[\"comment_charcount--empty-error\"]}`,\n        onChange: handleCommentChange,\n        value: comment,\n        \"aria-invalid\": isEmpty || !isValid,\n        \"aria-required\": \"true\",\n        \"aria-errormessage\": \"comment-error\",\n        placeholder: \"Type your comment here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), isEmpty && /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"comment-error\",\n        className: styles[\"comment_charcount--empty-message\"],\n        children: \"Can't be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), !isValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"comment-error\",\n        className: styles[\"comment_charcount--empty-message\"],\n        children: \"Character limit exceeded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"comment_details\"],\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: `${styles[\"comment_charcount\"]} ${!isValid && styles[\"comment_charcount--error\"]}`,\n          children: [charsLeft, \" characters left\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          btnStyle: isValid ? \"violet\" : \"disabled\",\n          text: \"Post Comment\",\n          form: \"add-comment\",\n          \"aria-disabled\": !isValid,\n          onClick: handleAddComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddCommentForm, \"wx7tN5xnyvJjs0kN115tSfOH9zM=\", false, function () {\n  return [useDispatch, useParams];\n});\n\n_c = AddCommentForm;\nexport default AddCommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCommentForm\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/AddCommentForm/AddCommentForm.js"],"names":["React","useEffect","useState","styles","useDispatch","useParams","Link","commentSuggestion","Button","AddCommentForm","updateComments","charsLeft","setCharsLeft","comment","setComment","isValid","isEmpty","setIsEmpty","user","JSON","parse","localStorage","getItem","dispatch","id","handleAddComment","e","preventDefault","newComments","handleCommentChange","target","value","length","comments"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"../CommentSection/Comments/Comments.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { commentSuggestion } from \"../../../actions/suggestions\";\nimport Button from \"../../UI/Button/Button\";\nconst AddCommentForm = ({ updateComments }) => {\n  const [charsLeft, setCharsLeft] = useState(225);\n  const [comment, setComment] = useState(\"\");\n  const isValid = charsLeft > 0; // Is the comment valid (characters still available)?\n  const [isEmpty, setIsEmpty] = useState(false); // Is the comment empty?\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  // Sends a comment to the back end, the refreshes the current suggestion's\n  // comments to be immediately displayed on the front end. Then, it resets\n  // the comment text area.\n  const handleAddComment = async (e) => {\n    e.preventDefault();\n\n    if (charsLeft === 225) setIsEmpty(true);\n\n    if (charsLeft !== 225 && isValid) {\n      const newComments = await dispatch(commentSuggestion(comment, id));\n      setComment(\"\"); // Reset the comment\n      setCharsLeft(225); // Reset the character count\n      updateComments(newComments); // Refresh the comments to reflect the newly added comment\n    }\n  };\n\n  const handleCommentChange = (e) => {\n    setCharsLeft(225 - e.target.value.length); // Update comment field character count\n    setComment(e.target.value); // Update the comment to be posted by the user.\n    setIsEmpty(false); // If the comment is empty, and a user types something, update the empty state to be false.\n  };\n\n  return (\n    <form id=\"add-comment\" className={styles.comments}>\n      {/* IF the user is not logged in, do not display the comment form. Instead, tell them to log in. */}\n      {!user && (\n        <h2 className={styles[\"comments_header\"]}>\n          <Link to=\"/auth\">Login</Link> to add a comment\n        </h2>\n      )}\n\n      {/* IF the user is logged in, allow them to comment. */}\n      {user && (\n        <>\n          <h2 className={styles[\"comments_header\"]}>Add a comment</h2>\n\n          {/* If there is an error with validation, outline the text area in red. */}\n          <textarea\n            className={`${styles[\"comment_textarea\"]} ${\n              (isEmpty || !isValid) && styles[\"comment_charcount--empty-error\"]\n            }`}\n            onChange={handleCommentChange}\n            value={comment}\n            aria-invalid={isEmpty || !isValid}\n            aria-required=\"true\"\n            aria-errormessage=\"comment-error\"\n            placeholder=\"Type your comment here...\"\n          />\n\n          {/* If there is no text, display a message saying the comment can't be empty. */}\n          {isEmpty && (\n            <p\n              id=\"comment-error\"\n              className={styles[\"comment_charcount--empty-message\"]}\n            >\n              Can't be empty\n            </p>\n          )}\n\n          {/* If there are no characters available in the char count, display a message saying too many chars. */}\n          {!isValid && (\n            <p\n              id=\"comment-error\"\n              className={styles[\"comment_charcount--empty-message\"]}\n            >\n              Character limit exceeded\n            </p>\n          )}\n\n          {/* Displays the character count (red if exceeding) and the Post Comment button (disabled if any errors) */}\n          <div className={styles[\"comment_details\"]}>\n            <p\n              className={`${styles[\"comment_charcount\"]} ${\n                !isValid && styles[\"comment_charcount--error\"]\n              }`}\n            >\n              {charsLeft} characters left\n            </p>\n\n            <Button\n              btnStyle={isValid ? \"violet\" : \"disabled\"}\n              text=\"Post Comment\"\n              form=\"add-comment\"\n              aria-disabled={!isValid}\n              onClick={handleAddComment}\n            />\n          </div>\n        </>\n      )}\n    </form>\n  );\n};\n\nexport default AddCommentForm;\n"]},"metadata":{},"sourceType":"module"}