{"ast":null,"code":"import { FETCH_ALL, FETCH_FILTERED, CREATE_SUGGESTION, START_LOADING, END_LOADING } from \"../constants/actionTypes\";\nimport * as api from \"../api\"; // Action Creators - Must use redux thunk since we are working with asynchronous data\n// Returns all suggestions\n\nexport const getSuggestions = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchSuggestions();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createSuggestion = newSuggestion => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createSuggestion(newSuggestion);\n    dispatch({\n      type: CREATE_SUGGESTION,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; // Returns suggestions that meet filter criteria (category, type, and order)\n// Category - All, UI, UX, Enhancement, Bug, Feature\n// Type - Upvotes or Comments\n// Order - Ascending (Least) or Descending (Most)\n\nexport const filterSuggestions = _ref => {\n  let {\n    category,\n    type,\n    order\n  } = _ref;\n  return async dispatch => {\n    try {\n      const {\n        data\n      } = await api.fetchFilteredSuggestions(category, type, order);\n      dispatch({\n        type: FETCH_FILTERED,\n        payload: data\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}; // Updates the filters currently selected by the user. This allows for\n// the search to work synchronously despite being in two seperate components.\n// Category component - SuggestionTag.js\n// Upvotes and Comments sort component - SuggestionsBar.js\n\nexport const setFilters = filters => async dispatch => {\n  dispatch({\n    type: \"CHANGE_TYPE\",\n    payload: filters\n  });\n};","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/actions/suggestions.js"],"names":["FETCH_ALL","FETCH_FILTERED","CREATE_SUGGESTION","START_LOADING","END_LOADING","api","getSuggestions","dispatch","data","fetchSuggestions","type","payload","error","console","log","message","createSuggestion","newSuggestion","filterSuggestions","category","order","fetchFilteredSuggestions","setFilters","filters"],"mappings":"AAAA,SACEA,SADF,EAEEC,cAFF,EAGEC,iBAHF,EAIEC,aAJF,EAKEC,WALF,QAMO,0BANP;AAOA,OAAO,KAAKC,GAAZ,MAAqB,QAArB,C,CAEA;AAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACtD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACI,gBAAJ,EAAvB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV,SAAR;AAAmBW,MAAAA,OAAO,EAAEH;AAA5B,KAAD,CAAR;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAPM;AASP,OAAO,MAAMC,gBAAgB,GAAIC,aAAD,IAAmB,MAAOV,QAAP,IAAoB;AACrE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACW,gBAAJ,CAAqBC,aAArB,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,iBAAR;AAA2BS,MAAAA,OAAO,EAAEH;AAApC,KAAD,CAAR;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAPM,C,CASP;AACA;AACA;AACA;;AACA,OAAO,MAAMG,iBAAiB,GAC5B;AAAA,MAAC;AAAEC,IAAAA,QAAF;AAAYT,IAAAA,IAAZ;AAAkBU,IAAAA;AAAlB,GAAD;AAAA,SACA,MAAOb,QAAP,IAAoB;AAClB,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMH,GAAG,CAACgB,wBAAJ,CACrBF,QADqB,EAErBT,IAFqB,EAGrBU,KAHqB,CAAvB;AAKAb,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAET,cAAR;AAAwBU,QAAAA,OAAO,EAAEH;AAAjC,OAAD,CAAR;AACD,KAPD,CAOE,OAAOI,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,GAZD;AAAA,CADK,C,CAeP;AACA;AACA;AACA;;AACA,OAAO,MAAMO,UAAU,GAAIC,OAAD,IAAa,MAAOhB,QAAP,IAAoB;AACzDA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE,aAAR;AAAuBC,IAAAA,OAAO,EAAEY;AAAhC,GAAD,CAAR;AACD,CAFM","sourcesContent":["import {\n  FETCH_ALL,\n  FETCH_FILTERED,\n  CREATE_SUGGESTION,\n  START_LOADING,\n  END_LOADING,\n} from \"../constants/actionTypes\";\nimport * as api from \"../api\";\n\n// Action Creators - Must use redux thunk since we are working with asynchronous data\n\n// Returns all suggestions\nexport const getSuggestions = () => async (dispatch) => {\n  try {\n    const { data } = await api.fetchSuggestions();\n    dispatch({ type: FETCH_ALL, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const createSuggestion = (newSuggestion) => async (dispatch) => {\n  try {\n    const { data } = await api.createSuggestion(newSuggestion);\n    dispatch({ type: CREATE_SUGGESTION, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// Returns suggestions that meet filter criteria (category, type, and order)\n// Category - All, UI, UX, Enhancement, Bug, Feature\n// Type - Upvotes or Comments\n// Order - Ascending (Least) or Descending (Most)\nexport const filterSuggestions =\n  ({ category, type, order }) =>\n  async (dispatch) => {\n    try {\n      const { data } = await api.fetchFilteredSuggestions(\n        category,\n        type,\n        order\n      );\n      dispatch({ type: FETCH_FILTERED, payload: data });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n// Updates the filters currently selected by the user. This allows for\n// the search to work synchronously despite being in two seperate components.\n// Category component - SuggestionTag.js\n// Upvotes and Comments sort component - SuggestionsBar.js\nexport const setFilters = (filters) => async (dispatch) => {\n  dispatch({ type: \"CHANGE_TYPE\", payload: filters });\n};\n"]},"metadata":{},"sourceType":"module"}