{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Edit/Edit.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getSuggestion, updateSuggestion, deleteSuggestion } from \"../../actions/suggestions\";\nimport styles from \"./Edit.module.css\";\nimport Heading from \"../UI/Heading/Heading\";\nimport Form from \"../UI/Forms/Form/Form\";\nimport FormTextInput from \"../UI/Forms/FormTextInput/FormTextInput\";\nimport FormSelectInput from \"../UI/Forms/FormSelectInput/FormSelectInput\";\nimport editIcon from \"../../assets/shared/icon-edit-feedback.svg\";\nimport Button from \"../UI/Button/Button\";\nimport checkIcon from \"../../assets/shared/icon-check.svg\";\nimport { SpinnerCircularFixed } from \"spinners-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Edit() {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams(); // Retrieve the data for the suggestion being edited\n\n  const {\n    suggestion,\n    isLoading\n  } = useSelector(state => state.suggestions); // Did the user submit the form?\n\n  const [submitted, setSubmitted] = useState(false); // Did the user delete the suggestion?\n\n  const [deleted, setDeleted] = useState(false); // A base state placeholder object for editing a form.\n\n  const [updatedSuggestion, setUpdatedSuggestion] = useState({\n    title: \"\",\n    category: \"\",\n    description: \"\"\n  }); // Form validation\n\n  const [titleError, setTitleError] = useState(false);\n  const [descriptionError, setDecriptionError] = useState(false); // If a user is not logged in upon trying to access this form,\n  // redirect them to sign in/sign up.\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  useEffect(() => {\n    var _user$result;\n\n    if (!(user !== null && user !== void 0 && (_user$result = user.result) !== null && _user$result !== void 0 && _user$result.name)) {\n      navigate(\"/auth\");\n    }\n  }); // Retrieve the suggestion that is being edited\n\n  useEffect(() => {\n    dispatch(getSuggestion(id));\n  }, [id]); // Update the suggestion information being displayed in\n  // the editing form based on the dispatch redux state change\n\n  useEffect(() => {\n    setUpdatedSuggestion(prevState => ({ ...prevState,\n      title: suggestion === null || suggestion === void 0 ? void 0 : suggestion.title,\n      category: suggestion === null || suggestion === void 0 ? void 0 : suggestion.category,\n      description: suggestion === null || suggestion === void 0 ? void 0 : suggestion.description\n    }));\n  }, [suggestion]); // Displays a loading circle if the form submission is still processing in the back end.\n  // Once finished, it will display a check mark.\n\n  const submissionConfirmation = isLoading ? /*#__PURE__*/_jsxDEV(SpinnerCircularFixed, {\n    color: \"hsl(230, 76%, 59%)\",\n    secondaryColor: \"#f2f5ff\",\n    style: {\n      height: 43.98,\n      margin: \"0 auto\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n    src: checkIcon,\n    className: styles[\"loading--check\"],\n    alt: \"Checkmark - action is completed\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this); // Displays a loading circle if the suggestion data from the back end is still being retrieved.\n\n  const loadingSuggestionInfo = /*#__PURE__*/_jsxDEV(SpinnerCircularFixed, {\n    color: \"hsl(230,76%,59%)\",\n    secondaryColor: \"#f2f5ff\",\n    style: {\n      maxHeight: \"35px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this); // After the form is submitted, wait 1.5 seconds before redirecting\n  // back to the previous page.\n\n\n  useEffect(() => {\n    if (!isLoading && submitted) {\n      let timerFunc = setTimeout(() => navigate(-1), 1500);\n      return () => clearTimeout(timerFunc);\n    }\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const titleValidation = updatedSuggestion.title.length !== 0;\n    const descriptionValidation = updatedSuggestion.description.length !== 0;\n    setTitleError(!titleValidation ? true : false);\n    setDecriptionError(!descriptionValidation ? true : false);\n\n    if (titleValidation && descriptionValidation) {\n      setSubmitted(true);\n      dispatch(updateSuggestion(id, updatedSuggestion));\n    }\n  };\n\n  const handleDelete = event => {\n    event.preventDefault();\n    dispatch(deleteSuggestion(id));\n    navigate(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [deletionNotificationActive && /*#__PURE__*/_jsxDEV(DeletionNotification, {\n      id: _id,\n      closeNotification: () => setDeleteNotificationActive(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      icon: editIcon,\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        type: \"h1\",\n        children: [\"Edit Your Feedback \", isLoading && !submitted && loadingSuggestionInfo]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(FormTextInput, {\n          inputId: \"title\",\n          value: isLoading && !submitted ? \"\" : updatedSuggestion.title,\n          labelHeading: \"Feedback Title\",\n          labelCaption: \"Add a short, descriptive headline\",\n          error: titleError,\n          onChange: event => setUpdatedSuggestion({ ...updatedSuggestion,\n            title: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormSelectInput, {\n          inputId: \"category\",\n          value: isLoading && !submitted ? \"Featured\" : updatedSuggestion.category,\n          labelHeading: \"Category\",\n          labelCaption: \"Choose a category for your feedback\",\n          onChange: event => setUpdatedSuggestion({ ...updatedSuggestion,\n            category: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormTextInput, {\n          inputId: \"detail\",\n          value: isLoading && !submitted ? \"\" : updatedSuggestion.description,\n          large: \"true\",\n          labelHeading: \"Feedback Detail\",\n          labelCaption: \"Include any specific comments on what should be improved, added, etc.\",\n          error: descriptionError,\n          onChange: event => setUpdatedSuggestion({ ...updatedSuggestion,\n            description: event.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles[\"button__container\"],\n          children: submitted ? submissionConfirmation : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              btnStyle: \"violet\",\n              text: \"Submit Changes\",\n              form: \"form\",\n              onClick: handleSubmit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              btnStyle: \"navy-blue\",\n              text: \"Cancel\",\n              onClick: handleSubmit,\n              link: true,\n              destination: -1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              btnStyle: \"red\",\n              text: \"Delete\",\n              onClick: handleDelete\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Edit, \"u3GQ5Frxw3DUd2v6f0znYnTFy8s=\", false, function () {\n  return [useDispatch, useNavigate, useParams, useSelector];\n});\n\n_c = Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Edit/Edit.js"],"names":["useEffect","useState","useDispatch","useSelector","useNavigate","useParams","getSuggestion","updateSuggestion","deleteSuggestion","styles","Heading","Form","FormTextInput","FormSelectInput","editIcon","Button","checkIcon","SpinnerCircularFixed","Edit","dispatch","navigate","id","suggestion","isLoading","state","suggestions","submitted","setSubmitted","deleted","setDeleted","updatedSuggestion","setUpdatedSuggestion","title","category","description","titleError","setTitleError","descriptionError","setDecriptionError","user","JSON","parse","localStorage","getItem","result","name","prevState","submissionConfirmation","height","margin","loadingSuggestionInfo","maxHeight","timerFunc","setTimeout","clearTimeout","handleSubmit","event","preventDefault","titleValidation","length","descriptionValidation","handleDelete","deletionNotificationActive","_id","setDeleteNotificationActive","target","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  getSuggestion,\n  updateSuggestion,\n  deleteSuggestion,\n} from \"../../actions/suggestions\";\nimport styles from \"./Edit.module.css\";\nimport Heading from \"../UI/Heading/Heading\";\nimport Form from \"../UI/Forms/Form/Form\";\nimport FormTextInput from \"../UI/Forms/FormTextInput/FormTextInput\";\nimport FormSelectInput from \"../UI/Forms/FormSelectInput/FormSelectInput\";\nimport editIcon from \"../../assets/shared/icon-edit-feedback.svg\";\nimport Button from \"../UI/Button/Button\";\nimport checkIcon from \"../../assets/shared/icon-check.svg\";\n\nimport { SpinnerCircularFixed } from \"spinners-react\";\n\nexport default function Edit() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { id } = useParams();\n\n  // Retrieve the data for the suggestion being edited\n  const { suggestion, isLoading } = useSelector((state) => state.suggestions);\n  // Did the user submit the form?\n  const [submitted, setSubmitted] = useState(false);\n  // Did the user delete the suggestion?\n  const [deleted, setDeleted] = useState(false);\n  // A base state placeholder object for editing a form.\n  const [updatedSuggestion, setUpdatedSuggestion] = useState({\n    title: \"\",\n    category: \"\",\n    description: \"\",\n  });\n  // Form validation\n  const [titleError, setTitleError] = useState(false);\n  const [descriptionError, setDecriptionError] = useState(false);\n\n  // If a user is not logged in upon trying to access this form,\n  // redirect them to sign in/sign up.\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  useEffect(() => {\n    if (!user?.result?.name) {\n      navigate(\"/auth\");\n    }\n  });\n\n  // Retrieve the suggestion that is being edited\n  useEffect(() => {\n    dispatch(getSuggestion(id));\n  }, [id]);\n\n  // Update the suggestion information being displayed in\n  // the editing form based on the dispatch redux state change\n  useEffect(() => {\n    setUpdatedSuggestion((prevState) => ({\n      ...prevState,\n      title: suggestion?.title,\n      category: suggestion?.category,\n      description: suggestion?.description,\n    }));\n  }, [suggestion]);\n\n  // Displays a loading circle if the form submission is still processing in the back end.\n  // Once finished, it will display a check mark.\n  const submissionConfirmation = isLoading ? (\n    <SpinnerCircularFixed\n      color=\"hsl(230, 76%, 59%)\"\n      secondaryColor=\"#f2f5ff\"\n      style={{ height: 43.98, margin: \"0 auto\" }}\n    />\n  ) : (\n    <img\n      src={checkIcon}\n      className={styles[\"loading--check\"]}\n      alt=\"Checkmark - action is completed\"\n    />\n  );\n\n  // Displays a loading circle if the suggestion data from the back end is still being retrieved.\n  const loadingSuggestionInfo = (\n    <SpinnerCircularFixed\n      color=\"hsl(230,76%,59%)\"\n      secondaryColor=\"#f2f5ff\"\n      style={{ maxHeight: \"35px\" }}\n    />\n  );\n\n  // After the form is submitted, wait 1.5 seconds before redirecting\n  // back to the previous page.\n  useEffect(() => {\n    if (!isLoading && submitted) {\n      let timerFunc = setTimeout(() => navigate(-1), 1500);\n      return () => clearTimeout(timerFunc);\n    }\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const titleValidation = updatedSuggestion.title.length !== 0;\n    const descriptionValidation = updatedSuggestion.description.length !== 0;\n\n    setTitleError(!titleValidation ? true : false);\n    setDecriptionError(!descriptionValidation ? true : false);\n\n    if (titleValidation && descriptionValidation) {\n      setSubmitted(true);\n      dispatch(updateSuggestion(id, updatedSuggestion));\n    }\n  };\n\n  const handleDelete = (event) => {\n    event.preventDefault();\n    dispatch(deleteSuggestion(id));\n    navigate(\"/\");\n  };\n\n  return (\n    <>\n      {deletionNotificationActive && (\n        <DeletionNotification\n          id={_id}\n          closeNotification={() => setDeleteNotificationActive(false)}\n        />\n      )}\n      <Form icon={editIcon}>\n        <Heading type=\"h1\">\n          Edit Your Feedback {isLoading && !submitted && loadingSuggestionInfo}\n        </Heading>\n\n        <form id=\"form\">\n          <FormTextInput\n            inputId=\"title\"\n            value={isLoading && !submitted ? \"\" : updatedSuggestion.title}\n            labelHeading=\"Feedback Title\"\n            labelCaption=\"Add a short, descriptive headline\"\n            error={titleError}\n            onChange={(event) =>\n              setUpdatedSuggestion({\n                ...updatedSuggestion,\n                title: event.target.value,\n              })\n            }\n          />\n          <FormSelectInput\n            inputId=\"category\"\n            value={\n              isLoading && !submitted ? \"Featured\" : updatedSuggestion.category\n            }\n            labelHeading=\"Category\"\n            labelCaption=\"Choose a category for your feedback\"\n            onChange={(event) =>\n              setUpdatedSuggestion({\n                ...updatedSuggestion,\n                category: event.target.value,\n              })\n            }\n          />\n          <FormTextInput\n            inputId=\"detail\"\n            value={isLoading && !submitted ? \"\" : updatedSuggestion.description}\n            large=\"true\"\n            labelHeading=\"Feedback Detail\"\n            labelCaption=\"Include any specific comments on what should be improved, added, etc.\"\n            error={descriptionError}\n            onChange={(event) =>\n              setUpdatedSuggestion({\n                ...updatedSuggestion,\n                description: event.target.value,\n              })\n            }\n          />\n\n          <div className={styles[\"button__container\"]}>\n            {submitted ? (\n              submissionConfirmation\n            ) : (\n              <>\n                <Button\n                  btnStyle=\"violet\"\n                  text=\"Submit Changes\"\n                  form=\"form\"\n                  onClick={handleSubmit}\n                />\n\n                <Button\n                  btnStyle=\"navy-blue\"\n                  text=\"Cancel\"\n                  onClick={handleSubmit}\n                  link={true}\n                  destination={-1}\n                />\n\n                <Button btnStyle=\"red\" text=\"Delete\" onClick={handleDelete} />\n              </>\n            )}\n          </div>\n        </form>\n      </Form>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}