{"ast":null,"code":"import styles from\"../FormInput.module.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function FormTextInput(_ref){var inputId=_ref.inputId,value=_ref.value,_ref$large=_ref.large,large=_ref$large===void 0?false:_ref$large,_ref$type=_ref.type,type=_ref$type===void 0?\"text\":_ref$type,error=_ref.error,labelHeading=_ref.labelHeading,labelCaption=_ref.labelCaption,onChange=_ref.onChange;var textInput;if(large){textInput=/*#__PURE__*/_jsx(\"textarea\",{id:inputId,\"aria-invalid\":error,\"aria-required\":\"true\",\"aria-errormessage\":\"validation-error\",onChange:onChange,value:value,className:error?styles.error:undefined});}else{textInput=/*#__PURE__*/_jsx(\"input\",{id:inputId,\"aria-invalid\":error,\"aria-required\":\"true\",\"aria-errormessage\":\"validation-error\",type:type,onChange:onChange,value:value,className:error?styles.error:undefined});}// If the text input is large, then use a textarea instead of a input of type text.\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:inputId,className:styles[\"caption-bold\"],children:labelHeading}),/*#__PURE__*/_jsx(\"label\",{htmlFor:inputId,className:styles.caption,children:labelCaption}),textInput,error&&/*#__PURE__*/_jsx(\"p\",{id:\"validation-error\",className:styles[\"error_message\"],children:\"Can't be empty\"})]});}","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/UI/Forms/FormTextInput/FormTextInput.js"],"names":["styles","FormTextInput","inputId","value","large","type","error","labelHeading","labelCaption","onChange","textInput","undefined","caption"],"mappings":"AAAA,MAAOA,CAAAA,MAAP,KAAmB,yBAAnB,C,6IACA,cAAe,SAASC,CAAAA,aAAT,MASZ,IARDC,CAAAA,OAQC,MARDA,OAQC,CAPDC,KAOC,MAPDA,KAOC,iBANDC,KAMC,CANDA,KAMC,qBANO,KAMP,2BALDC,IAKC,CALDA,IAKC,oBALM,MAKN,WAJDC,KAIC,MAJDA,KAIC,CAHDC,YAGC,MAHDA,YAGC,CAFDC,YAEC,MAFDA,YAEC,CADDC,QACC,MADDA,QACC,CACD,GAAIC,CAAAA,SAAJ,CACA,GAAIN,KAAJ,CAAW,CACTM,SAAS,cACP,iBACE,EAAE,CAAER,OADN,CAEE,eAAcI,KAFhB,CAGE,gBAAc,MAHhB,CAIE,oBAAkB,kBAJpB,CAKE,QAAQ,CAAEG,QALZ,CAME,KAAK,CAAEN,KANT,CAOE,SAAS,CAAEG,KAAK,CAAGN,MAAM,CAACM,KAAV,CAAkBK,SAPpC,EADF,CAWD,CAZD,IAYO,CACLD,SAAS,cACP,cACE,EAAE,CAAER,OADN,CAEE,eAAcI,KAFhB,CAGE,gBAAc,MAHhB,CAIE,oBAAkB,kBAJpB,CAKE,IAAI,CAAED,IALR,CAME,QAAQ,CAAEI,QANZ,CAOE,KAAK,CAAEN,KAPT,CAQE,SAAS,CAAEG,KAAK,CAAGN,MAAM,CAACM,KAAV,CAAkBK,SARpC,EADF,CAYD,CAED;AACA,mBACE,wCACE,cAAO,OAAO,CAAET,OAAhB,CAAyB,SAAS,CAAEF,MAAM,CAAC,cAAD,CAA1C,UACGO,YADH,EADF,cAIE,cAAO,OAAO,CAAEL,OAAhB,CAAyB,SAAS,CAAEF,MAAM,CAACY,OAA3C,UACGJ,YADH,EAJF,CAQGE,SARH,CAUGJ,KAAK,eACJ,UAAG,EAAE,CAAC,kBAAN,CAAyB,SAAS,CAAEN,MAAM,CAAC,eAAD,CAA1C,4BAXJ,GADF,CAkBD","sourcesContent":["import styles from \"../FormInput.module.css\";\nexport default function FormTextInput({\n  inputId, // The input id and label htmlFor value\n  value, // The inner text value of the input being displayed\n  large = false, // Whether or not the text box is multiple lines or a single line\n  type = \"text\",\n  error, // Is the input text valid?\n  labelHeading,\n  labelCaption,\n  onChange,\n}) {\n  let textInput;\n  if (large) {\n    textInput = (\n      <textarea\n        id={inputId}\n        aria-invalid={error}\n        aria-required=\"true\"\n        aria-errormessage=\"validation-error\"\n        onChange={onChange}\n        value={value}\n        className={error ? styles.error : undefined}\n      />\n    );\n  } else {\n    textInput = (\n      <input\n        id={inputId}\n        aria-invalid={error}\n        aria-required=\"true\"\n        aria-errormessage=\"validation-error\"\n        type={type}\n        onChange={onChange}\n        value={value}\n        className={error ? styles.error : undefined}\n      />\n    );\n  }\n\n  // If the text input is large, then use a textarea instead of a input of type text.\n  return (\n    <>\n      <label htmlFor={inputId} className={styles[\"caption-bold\"]}>\n        {labelHeading}\n      </label>\n      <label htmlFor={inputId} className={styles.caption}>\n        {labelCaption}\n      </label>\n\n      {textInput}\n\n      {error && (\n        <p id=\"validation-error\" className={styles[\"error_message\"]}>\n          Can't be empty\n        </p>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}