{"ast":null,"code":"import _slicedToArray from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import{filterSuggestions,setFilters}from\"../../../../actions/suggestions\";import{useMediaQuery}from\"react-responsive\";import styles from\"./SuggestionsBar.module.css\";import Button from\"../../../UI/Button/Button\";import Heading from\"../../../UI/Heading/Heading\";import bulbIcon from\"../../../../assets/suggestions/icon-suggestions.svg\";import{DropDownMenu}from\"../../../UI/DropDownMenu/DropDownMenu\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function SuggestionsBar(){var isMobile=useMediaQuery({query:\"(max-width: 767px)\"});var sortingOptions=[\"Most Upvotes\",\"Least Upvotes\",\"Most Comments\",\"Least Comments\"];var _useState=useState(\"Most Upvotes\"),_useState2=_slicedToArray(_useState,2),option=_useState2[0],setOption=_useState2[1];// Retrieves all of the suggestions and filters that are selected\nvar _useSelector=useSelector(function(state){return state.suggestions;}),suggestions=_useSelector.suggestions,_useSelector$filters=_useSelector.filters,sortCategory=_useSelector$filters.sortCategory,sortType=_useSelector$filters.sortType,sortOrder=_useSelector$filters.sortOrder;var dispatch=useDispatch();// Sort by Most Upvotes on component mount\nuseEffect(function(){dispatch(filterSuggestions({category:\"All\",type:\"upvotes\",order:\"desc\"}));},[]);// Listen for each time a new sorting option is selected and update state\nuseEffect(function(){// Determine the sort order (ascending/descending) and type (upvotes/comments)\nvar order=option.includes(\"Most\")?\"desc\":\"asc\";var type=option.includes(\"Upvotes\")?\"upvotes\":\"comments\";// Update the sorting filters\ndispatch(setFilters({sortCategory:sortCategory,sortType:type,sortOrder:order}));// Sort data depending on order (most/least) and type(upvotes/comments)\ndispatch(filterSuggestions({category:sortCategory,type:sortType,order:sortOrder}));},[option,sortCategory,sortType,sortOrder,dispatch]);// Displays how many suggestions are available on screen sizes larger than 768px\nvar suggestionCount=!isMobile&&/*#__PURE__*/_jsxs(Heading,{type:\"h3\",white:true,children:[/*#__PURE__*/_jsx(\"img\",{src:bulbIcon,alt:\"Light bulb signifying an idea\"}),suggestions.length,\" Suggestions\"]});return/*#__PURE__*/_jsxs(\"section\",{className:\"\".concat(styles.bar,\" \").concat(isMobile&&styles[\"bar--sticky\"]),children:[suggestionCount,/*#__PURE__*/_jsx(DropDownMenu,{listOptions:sortingOptions,setOption:setOption}),/*#__PURE__*/_jsx(Button,{btnStyle:\"violet\",text:\"+ Add Feedback\",link:true,destination:\"create-feedback\"})]});}","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsBar/SuggestionsBar.js"],"names":["useState","useEffect","useSelector","useDispatch","filterSuggestions","setFilters","useMediaQuery","styles","Button","Heading","bulbIcon","DropDownMenu","SuggestionsBar","isMobile","query","sortingOptions","option","setOption","state","suggestions","filters","sortCategory","sortType","sortOrder","dispatch","category","type","order","includes","suggestionCount","length","bar"],"mappings":"mIAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,iBAAT,CAA4BC,UAA5B,KAA8C,iCAA9C,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,MAAOC,CAAAA,MAAP,KAAmB,6BAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,2BAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,6BAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,qDAArB,CACA,OAASC,YAAT,KAA6B,uCAA7B,C,wFAEA,cAAe,SAASC,CAAAA,cAAT,EAA0B,CACvC,GAAMC,CAAAA,QAAQ,CAAGP,aAAa,CAAC,CAAEQ,KAAK,CAAE,oBAAT,CAAD,CAA9B,CACA,GAAMC,CAAAA,cAAc,CAAG,CACrB,cADqB,CAErB,eAFqB,CAGrB,eAHqB,CAIrB,gBAJqB,CAAvB,CAMA,cAA4Bf,QAAQ,CAAC,cAAD,CAApC,wCAAOgB,MAAP,eAAeC,SAAf,eAEA;AACA,iBAGIf,WAAW,CAAC,SAACgB,KAAD,QAAWA,CAAAA,KAAK,CAACC,WAAjB,EAAD,CAHf,CACEA,WADF,cACEA,WADF,mCAEEC,OAFF,CAEaC,YAFb,sBAEaA,YAFb,CAE2BC,QAF3B,sBAE2BA,QAF3B,CAEqCC,SAFrC,sBAEqCA,SAFrC,CAKA,GAAMC,CAAAA,QAAQ,CAAGrB,WAAW,EAA5B,CAEA;AACAF,SAAS,CAAC,UAAM,CACduB,QAAQ,CACNpB,iBAAiB,CAAC,CAChBqB,QAAQ,CAAE,KADM,CAEhBC,IAAI,CAAE,SAFU,CAGhBC,KAAK,CAAE,MAHS,CAAD,CADX,CAAR,CAOD,CARQ,CAQN,EARM,CAAT,CAUA;AACA1B,SAAS,CAAC,UAAM,CACd;AACA,GAAM0B,CAAAA,KAAK,CAAGX,MAAM,CAACY,QAAP,CAAgB,MAAhB,EAA0B,MAA1B,CAAmC,KAAjD,CACA,GAAMF,CAAAA,IAAI,CAAGV,MAAM,CAACY,QAAP,CAAgB,SAAhB,EAA6B,SAA7B,CAAyC,UAAtD,CAEA;AACAJ,QAAQ,CACNnB,UAAU,CAAC,CACTgB,YAAY,CAAEA,YADL,CAETC,QAAQ,CAAEI,IAFD,CAGTH,SAAS,CAAEI,KAHF,CAAD,CADJ,CAAR,CAQA;AACAH,QAAQ,CACNpB,iBAAiB,CAAC,CAChBqB,QAAQ,CAAEJ,YADM,CAEhBK,IAAI,CAAEJ,QAFU,CAGhBK,KAAK,CAAEJ,SAHS,CAAD,CADX,CAAR,CAOD,CAtBQ,CAsBN,CAACP,MAAD,CAASK,YAAT,CAAuBC,QAAvB,CAAiCC,SAAjC,CAA4CC,QAA5C,CAtBM,CAAT,CAwBA;AACA,GAAMK,CAAAA,eAAe,CAAG,CAAChB,QAAD,eACtB,MAAC,OAAD,EAAS,IAAI,CAAC,IAAd,CAAmB,KAAK,CAAE,IAA1B,wBACE,YAAK,GAAG,CAAEH,QAAV,CAAoB,GAAG,CAAC,+BAAxB,EADF,CAEGS,WAAW,CAACW,MAFf,kBADF,CAOA,mBACE,iBAAS,SAAS,WAAKvB,MAAM,CAACwB,GAAZ,aAAmBlB,QAAQ,EAAIN,MAAM,CAAC,aAAD,CAArC,CAAlB,WACGsB,eADH,cAGE,KAAC,YAAD,EAAc,WAAW,CAAEd,cAA3B,CAA2C,SAAS,CAAEE,SAAtD,EAHF,cAKE,KAAC,MAAD,EACE,QAAQ,CAAC,QADX,CAEE,IAAI,CAAC,gBAFP,CAGE,IAAI,CAAE,IAHR,CAIE,WAAW,CAAC,iBAJd,EALF,GADF,CAcD","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterSuggestions, setFilters } from \"../../../../actions/suggestions\";\nimport { useMediaQuery } from \"react-responsive\";\nimport styles from \"./SuggestionsBar.module.css\";\nimport Button from \"../../../UI/Button/Button\";\nimport Heading from \"../../../UI/Heading/Heading\";\nimport bulbIcon from \"../../../../assets/suggestions/icon-suggestions.svg\";\nimport { DropDownMenu } from \"../../../UI/DropDownMenu/DropDownMenu\";\n\nexport default function SuggestionsBar() {\n  const isMobile = useMediaQuery({ query: \"(max-width: 767px)\" });\n  const sortingOptions = [\n    \"Most Upvotes\",\n    \"Least Upvotes\",\n    \"Most Comments\",\n    \"Least Comments\",\n  ];\n  const [option, setOption] = useState(\"Most Upvotes\");\n\n  // Retrieves all of the suggestions and filters that are selected\n  const {\n    suggestions,\n    filters: { sortCategory, sortType, sortOrder },\n  } = useSelector((state) => state.suggestions);\n\n  const dispatch = useDispatch();\n\n  // Sort by Most Upvotes on component mount\n  useEffect(() => {\n    dispatch(\n      filterSuggestions({\n        category: \"All\",\n        type: \"upvotes\",\n        order: \"desc\",\n      })\n    );\n  }, []);\n\n  // Listen for each time a new sorting option is selected and update state\n  useEffect(() => {\n    // Determine the sort order (ascending/descending) and type (upvotes/comments)\n    const order = option.includes(\"Most\") ? \"desc\" : \"asc\";\n    const type = option.includes(\"Upvotes\") ? \"upvotes\" : \"comments\";\n\n    // Update the sorting filters\n    dispatch(\n      setFilters({\n        sortCategory: sortCategory,\n        sortType: type,\n        sortOrder: order,\n      })\n    );\n\n    // Sort data depending on order (most/least) and type(upvotes/comments)\n    dispatch(\n      filterSuggestions({\n        category: sortCategory,\n        type: sortType,\n        order: sortOrder,\n      })\n    );\n  }, [option, sortCategory, sortType, sortOrder, dispatch]);\n\n  // Displays how many suggestions are available on screen sizes larger than 768px\n  const suggestionCount = !isMobile && (\n    <Heading type=\"h3\" white={true}>\n      <img src={bulbIcon} alt=\"Light bulb signifying an idea\" />\n      {suggestions.length} Suggestions\n    </Heading>\n  );\n\n  return (\n    <section className={`${styles.bar} ${isMobile && styles[\"bar--sticky\"]}`}>\n      {suggestionCount}\n\n      <DropDownMenu listOptions={sortingOptions} setOption={setOption} />\n\n      <Button\n        btnStyle=\"violet\"\n        text=\"+ Add Feedback\"\n        link={true}\n        destination=\"create-feedback\"\n      />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}