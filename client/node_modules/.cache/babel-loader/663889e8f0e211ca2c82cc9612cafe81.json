{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/UI/Tag/Tag.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./Tag.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilters, filterSuggestions } from \"../../../actions/suggestions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tag(_ref) {\n  _s();\n\n  let {\n    category,\n    closeMobileMenu\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    filters: {\n      sortType,\n      sortOrder\n    }\n  } = useSelector(state => state.suggestions);\n\n  const handleFiltering = () => {\n    // Update the sorting filter for category. This is kept in state so that when a user\n    // decides to use the \"Sort by: most/least upvotes/comments\" filter, the current category\n    // chosen will also be taken into consideration when displaying results.\n    dispatch(setFilters({\n      sortCategory: category\n    })); // Filter the suggestions based on the new category.\n\n    dispatch(filterSuggestions({\n      category: category,\n      type: sortType,\n      order: sortOrder\n    })); // If this prop is not null, then the user is using a mobile device.\n    // Close the mobile menu when a category tag is selected.\n\n    closeMobileMenu && closeMobileMenu();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: styles.tag,\n    onClick: handleFiltering,\n    children: category\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Tag, \"+8BBjpQc+GyDypmyFfRz4nzczR8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Tag;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tag\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/UI/Tag/Tag.js"],"names":["styles","useDispatch","useSelector","setFilters","filterSuggestions","Tag","category","closeMobileMenu","dispatch","filters","sortType","sortOrder","state","suggestions","handleFiltering","sortCategory","type","order","tag"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,8BAA9C;;AACA,eAAe,SAASC,GAAT,OAA4C;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA+B;AACzD,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AACJQ,IAAAA,OAAO,EAAE;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ;AADL,MAEFT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAFf;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC5B;AACA;AACA;AACAN,IAAAA,QAAQ,CACNL,UAAU,CAAC;AACTY,MAAAA,YAAY,EAAET;AADL,KAAD,CADJ,CAAR,CAJ4B,CAU5B;;AACAE,IAAAA,QAAQ,CACNJ,iBAAiB,CAAC;AAChBE,MAAAA,QAAQ,EAAEA,QADM;AAEhBU,MAAAA,IAAI,EAAEN,QAFU;AAGhBO,MAAAA,KAAK,EAAEN;AAHS,KAAD,CADX,CAAR,CAX4B,CAmB5B;AACA;;AACAJ,IAAAA,eAAe,IAAIA,eAAe,EAAlC;AACD,GAtBD;;AAwBA,sBACE;AAAQ,IAAA,SAAS,EAAEP,MAAM,CAACkB,GAA1B;AAA+B,IAAA,OAAO,EAAEJ,eAAxC;AAAA,cACGR;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAnCuBD,G;UACLJ,W,EAGbC,W;;;KAJkBG,G","sourcesContent":["import styles from \"./Tag.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilters, filterSuggestions } from \"../../../actions/suggestions\";\nexport default function Tag({ category, closeMobileMenu }) {\n  const dispatch = useDispatch();\n  const {\n    filters: { sortType, sortOrder },\n  } = useSelector((state) => state.suggestions);\n\n  const handleFiltering = () => {\n    // Update the sorting filter for category. This is kept in state so that when a user\n    // decides to use the \"Sort by: most/least upvotes/comments\" filter, the current category\n    // chosen will also be taken into consideration when displaying results.\n    dispatch(\n      setFilters({\n        sortCategory: category,\n      })\n    );\n\n    // Filter the suggestions based on the new category.\n    dispatch(\n      filterSuggestions({\n        category: category,\n        type: sortType,\n        order: sortOrder,\n      })\n    );\n\n    // If this prop is not null, then the user is using a mobile device.\n    // Close the mobile menu when a category tag is selected.\n    closeMobileMenu && closeMobileMenu();\n  };\n\n  return (\n    <button className={styles.tag} onClick={handleFiltering}>\n      {category}\n    </button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}