{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/UI/DropDownMenu/DropDownMenu.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"./DropDownMenu.module.css\";\nimport downArrowIcon from \"../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../assets/shared/icon-check.svg\"; // Takes in a list of options and a state setting function, setOption.\n// Once a user makes a selection, the option in the component is changed.\n// If the dropdown menu is part of a form, change the styling.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DropDownMenu = _ref => {\n  _s();\n\n  let {\n    listOptions,\n    setOption,\n    isForm = false\n  } = _ref;\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(listOptions[0]);\n\n  const handleDropDown = event => {\n    event.preventDefault();\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleOptionSelection = event => {\n    setMenuOpen(false); // Close the dropdown menu\n\n    setSelectedOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n\n    setOption(event.target.innerText);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles[\"listbox\"]} ${isForm && styles[\"listbox--form\"] && menuOpen && styles[\"listbox--open\"]}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"sort_options\"],\n      children: [!isForm && /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"sort_label\",\n        children: \"Sort by :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${isForm && styles[\"listbox--form-button\"]}`,\n        onClick: handleDropDown,\n        \"aria-haspopup\": \"listbox\",\n        \"aria-expanded\": \"false\",\n        \"aria-labelledby\": \"sort_label\",\n        children: selectedOption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: downArrowIcon,\n        onClick: handleDropDown,\n        className: `${!isForm ? styles.menuarrow : styles[\"menuarrow--form\"]} ${menuOpen && styles[\"menuarrow--active\"]}`,\n        alt: `${menuOpen ? \"Down\" : \"Up\"} arrow`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles[\"dropdown\"]} ${menuOpen && styles[\"dropdown--active\"]} ${isForm && styles[\"dropdown--form\"]}`,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        role: \"listbox\",\n        \"aria-labelledby\": \"sort_label\",\n        children: listOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles[\"listitem\"],\n          \"aria-selected\": selectedOption === option ? true : false,\n          role: \"option\",\n          tabIndex: \"0\",\n          onClick: handleOptionSelection,\n          onKeyPress: handleOptionSelection,\n          children: [option, selectedOption === option && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: checkIcon,\n            alt: \"Checkmark\",\n            className: styles[\"listitem_checkmark\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DropDownMenu, \"6UYGJL+d3YorYzg78JexoDotIvI=\");\n\n_c = DropDownMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropDownMenu\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/UI/DropDownMenu/DropDownMenu.js"],"names":["React","useState","styles","downArrowIcon","checkIcon","DropDownMenu","listOptions","setOption","isForm","menuOpen","setMenuOpen","selectedOption","setSelectedOption","handleDropDown","event","preventDefault","target","setAttribute","handleOptionSelection","innerText","menuarrow","map","option","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./DropDownMenu.module.css\";\nimport downArrowIcon from \"../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../assets/shared/icon-check.svg\";\n\n// Takes in a list of options and a state setting function, setOption.\n// Once a user makes a selection, the option in the component is changed.\n// If the dropdown menu is part of a form, change the styling.\nexport const DropDownMenu = ({ listOptions, setOption, isForm = false }) => {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [selectedOption, setSelectedOption] = useState(listOptions[0]);\n\n  const handleDropDown = (event) => {\n    event.preventDefault();\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleOptionSelection = (event) => {\n    setMenuOpen(false); // Close the dropdown menu\n    setSelectedOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n    setOption(event.target.innerText);\n  };\n\n  return (\n    <div\n      className={`${styles[\"listbox\"]} ${\n        isForm && styles[\"listbox--form\"] && menuOpen && styles[\"listbox--open\"]\n      }`}\n    >\n      {/* Container for the label, the dropdown button, and the up/down arrow */}\n      <div className={styles[\"sort_options\"]}>\n        {!isForm && <span id=\"sort_label\">Sort by :</span>}\n        <button\n          className={`${isForm && styles[\"listbox--form-button\"]}`}\n          onClick={handleDropDown}\n          aria-haspopup=\"listbox\"\n          aria-expanded=\"false\"\n          aria-labelledby=\"sort_label\"\n        >\n          {selectedOption}\n        </button>\n        <img\n          src={downArrowIcon}\n          onClick={handleDropDown}\n          className={`${\n            !isForm ? styles.menuarrow : styles[\"menuarrow--form\"]\n          } ${menuOpen && styles[\"menuarrow--active\"]}`}\n          alt={`${menuOpen ? \"Down\" : \"Up\"} arrow`}\n        />\n      </div>\n\n      {/* Dropdown pop up */}\n      <div\n        className={`${styles[\"dropdown\"]} ${\n          menuOpen && styles[\"dropdown--active\"]\n        } ${isForm && styles[\"dropdown--form\"]}`}\n      >\n        <ul role=\"listbox\" aria-labelledby=\"sort_label\">\n          {listOptions.map((option, index) => (\n            <li\n              key={index}\n              className={styles[\"listitem\"]}\n              aria-selected={selectedOption === option ? true : false}\n              role=\"option\"\n              tabIndex=\"0\"\n              onClick={handleOptionSelection}\n              onKeyPress={handleOptionSelection}\n            >\n              {/* Option text */}\n              {option}\n\n              {/* If a list item is currently selected, display a checkmark */}\n              {selectedOption === option && (\n                <img\n                  src={checkIcon}\n                  alt=\"Checkmark\"\n                  className={styles[\"listitem_checkmark\"]}\n                />\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}