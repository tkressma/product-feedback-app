{"ast":null,"code":"import _slicedToArray from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import styles from\"./Comments.module.css\";import Comment from\"./Comment/Comment\";import AddCommentForm from\"../AddCommentForm/AddCommentForm\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var CommentSection=function CommentSection(_ref){var commentData=_ref.commentData;var user=JSON.parse(localStorage.getItem(\"profile\"));var _useState=useState(commentData),_useState2=_slicedToArray(_useState,2),updatedComments=_useState2[0],setUpdatedComments=_useState2[1];var totalComments=updatedComments.length+addReplies(updatedComments);// Checks every comment in the suggestion for replies and returns a running total.\nfunction addReplies(arr){var totalReplies=0;// If replies exist, add that to the total replies. Else, set the value to 0.\narr.forEach(function(comment){var _comment$replies;totalReplies+=(comment===null||comment===void 0?void 0:(_comment$replies=comment.replies)===null||_comment$replies===void 0?void 0:_comment$replies.length)||0;});return totalReplies;}var commentTitle=updatedComments.length===1?\"1 Comment\":\"\".concat(totalComments,\" Comments\");var commentCards=updatedComments.map(function(comment,index){return/*#__PURE__*/_jsx(Comment,{user:comment.user,id:comment._id,content:comment.content,replies:comment.replies},index);});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"section\",{className:styles.comments,children:[/*#__PURE__*/_jsxs(\"h1\",{className:styles[\"comments_header\"],children:[commentTitle,\" \"]}),commentCards]}),/*#__PURE__*/_jsx(AddCommentForm,{currentUser:user,updateComments:setUpdatedComments})]});};export default CommentSection;","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/CommentSection/CommentSection.js"],"names":["React","useState","styles","Comment","AddCommentForm","CommentSection","commentData","user","JSON","parse","localStorage","getItem","updatedComments","setUpdatedComments","totalComments","length","addReplies","arr","totalReplies","forEach","comment","replies","commentTitle","commentCards","map","index","_id","content","comments"],"mappings":"mIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,mBAApB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kCAA3B,C,6IACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAqB,IAAlBC,CAAAA,WAAkB,MAAlBA,WAAkB,CAC1C,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb,CAEA,cAA8CV,QAAQ,CAACK,WAAD,CAAtD,wCAAOM,eAAP,eAAwBC,kBAAxB,eAEA,GAAIC,CAAAA,aAAa,CAAGF,eAAe,CAACG,MAAhB,CAAyBC,UAAU,CAACJ,eAAD,CAAvD,CACA;AACA,QAASI,CAAAA,UAAT,CAAoBC,GAApB,CAAyB,CACvB,GAAIC,CAAAA,YAAY,CAAG,CAAnB,CAEA;AACAD,GAAG,CAACE,OAAJ,CAAY,SAACC,OAAD,CAAa,sBACvBF,YAAY,EAAI,CAAAE,OAAO,OAAP,EAAAA,OAAO,SAAP,0BAAAA,OAAO,CAAEC,OAAT,4DAAkBN,MAAlB,GAA4B,CAA5C,CACD,CAFD,EAIA,MAAOG,CAAAA,YAAP,CACD,CAED,GAAMI,CAAAA,YAAY,CAChBV,eAAe,CAACG,MAAhB,GAA2B,CAA3B,CAA+B,WAA/B,WAAgDD,aAAhD,aADF,CAEA,GAAMS,CAAAA,YAAY,CAAGX,eAAe,CAACY,GAAhB,CAAoB,SAACJ,OAAD,CAAUK,KAAV,qBACvC,KAAC,OAAD,EAEE,IAAI,CAAEL,OAAO,CAACb,IAFhB,CAGE,EAAE,CAAEa,OAAO,CAACM,GAHd,CAIE,OAAO,CAAEN,OAAO,CAACO,OAJnB,CAKE,OAAO,CAAEP,OAAO,CAACC,OALnB,EACOI,KADP,CADuC,EAApB,CAArB,CAUA,mBACE,wCACE,iBAAS,SAAS,CAAEvB,MAAM,CAAC0B,QAA3B,wBACE,YAAI,SAAS,CAAE1B,MAAM,CAAC,iBAAD,CAArB,WAA2CoB,YAA3C,OADF,CAEGC,YAFH,GADF,cAKE,KAAC,cAAD,EAAgB,WAAW,CAAEhB,IAA7B,CAAmC,cAAc,CAAEM,kBAAnD,EALF,GADF,CASD,CAvCD,CAyCA,cAAeR,CAAAA,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./Comments.module.css\";\nimport Comment from \"./Comment/Comment\";\nimport AddCommentForm from \"../AddCommentForm/AddCommentForm\";\nconst CommentSection = ({ commentData }) => {\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  const [updatedComments, setUpdatedComments] = useState(commentData);\n\n  let totalComments = updatedComments.length + addReplies(updatedComments);\n  // Checks every comment in the suggestion for replies and returns a running total.\n  function addReplies(arr) {\n    let totalReplies = 0;\n\n    // If replies exist, add that to the total replies. Else, set the value to 0.\n    arr.forEach((comment) => {\n      totalReplies += comment?.replies?.length || 0;\n    });\n\n    return totalReplies;\n  }\n\n  const commentTitle =\n    updatedComments.length === 1 ? \"1 Comment\" : `${totalComments} Comments`;\n  const commentCards = updatedComments.map((comment, index) => (\n    <Comment\n      key={index}\n      user={comment.user}\n      id={comment._id}\n      content={comment.content}\n      replies={comment.replies}\n    />\n  ));\n\n  return (\n    <>\n      <section className={styles.comments}>\n        <h1 className={styles[\"comments_header\"]}>{commentTitle} </h1>\n        {commentCards}\n      </section>\n      <AddCommentForm currentUser={user} updateComments={setUpdatedComments} />\n    </>\n  );\n};\n\nexport default CommentSection;\n"]},"metadata":{},"sourceType":"module"}