{"ast":null,"code":"import styles from\"./Tag.module.css\";import{useDispatch,useSelector}from\"react-redux\";import{setFilters,filterSuggestions}from\"../../../actions/suggestions\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function Tag(_ref){var category=_ref.category,closeMobileMenu=_ref.closeMobileMenu;var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.suggestions;}),_useSelector$filters=_useSelector.filters,sortType=_useSelector$filters.sortType,sortOrder=_useSelector$filters.sortOrder;var handleFiltering=function handleFiltering(){// Update the sorting filter for category. This is kept in state so that when a user\n// decides to use the \"Sort by: most/least upvotes/comments\" filter, the current category\n// chosen will also be taken into consideration when displaying results.\ndispatch(setFilters({sortCategory:category}));// Filter the suggestions based on the new category.\ndispatch(filterSuggestions({category:category,type:sortType,order:sortOrder}));// If this prop is not null, then the user is using a mobile device.\n// Close the mobile menu when a category tag is selected.\ncloseMobileMenu&&closeMobileMenu();};return/*#__PURE__*/_jsx(\"button\",{className:styles.tag,onClick:handleFiltering,children:category});}","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/UI/Tag/Tag.js"],"names":["styles","useDispatch","useSelector","setFilters","filterSuggestions","Tag","category","closeMobileMenu","dispatch","state","suggestions","filters","sortType","sortOrder","handleFiltering","sortCategory","type","order","tag"],"mappings":"AAAA,MAAOA,CAAAA,MAAP,KAAmB,kBAAnB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,UAAT,CAAqBC,iBAArB,KAA8C,8BAA9C,C,2CACA,cAAe,SAASC,CAAAA,GAAT,MAA4C,IAA7BC,CAAAA,QAA6B,MAA7BA,QAA6B,CAAnBC,eAAmB,MAAnBA,eAAmB,CACzD,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CACA,iBAEIC,WAAW,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACC,WAAjB,EAAD,CAFf,mCACEC,OADF,CACaC,QADb,sBACaA,QADb,CACuBC,SADvB,sBACuBA,SADvB,CAIA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B;AACA;AACA;AACAN,QAAQ,CACNL,UAAU,CAAC,CACTY,YAAY,CAAET,QADL,CAAD,CADJ,CAAR,CAMA;AACAE,QAAQ,CACNJ,iBAAiB,CAAC,CAChBE,QAAQ,CAAEA,QADM,CAEhBU,IAAI,CAAEJ,QAFU,CAGhBK,KAAK,CAAEJ,SAHS,CAAD,CADX,CAAR,CAQA;AACA;AACAN,eAAe,EAAIA,eAAe,EAAlC,CACD,CAtBD,CAwBA,mBACE,eAAQ,SAAS,CAAEP,MAAM,CAACkB,GAA1B,CAA+B,OAAO,CAAEJ,eAAxC,UACGR,QADH,EADF,CAKD","sourcesContent":["import styles from \"./Tag.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilters, filterSuggestions } from \"../../../actions/suggestions\";\nexport default function Tag({ category, closeMobileMenu }) {\n  const dispatch = useDispatch();\n  const {\n    filters: { sortType, sortOrder },\n  } = useSelector((state) => state.suggestions);\n\n  const handleFiltering = () => {\n    // Update the sorting filter for category. This is kept in state so that when a user\n    // decides to use the \"Sort by: most/least upvotes/comments\" filter, the current category\n    // chosen will also be taken into consideration when displaying results.\n    dispatch(\n      setFilters({\n        sortCategory: category,\n      })\n    );\n\n    // Filter the suggestions based on the new category.\n    dispatch(\n      filterSuggestions({\n        category: category,\n        type: sortType,\n        order: sortOrder,\n      })\n    );\n\n    // If this prop is not null, then the user is using a mobile device.\n    // Close the mobile menu when a category tag is selected.\n    closeMobileMenu && closeMobileMenu();\n  };\n\n  return (\n    <button className={styles.tag} onClick={handleFiltering}>\n      {category}\n    </button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}