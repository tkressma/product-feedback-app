{"ast":null,"code":"import { FETCH_FILTERED, FETCH_SUGGESTION, CREATE_SUGGESTION, UPDATE_SUGGESTION, DELETE_SUGGESTION, UPVOTE, COMMENT, REPLY, START_LOADING, END_LOADING, CHANGE_FILTERS } from \"../constants/actionTypes\";\nimport * as api from \"../api\"; // The following code is used to generate a username for users signed in with GoogleOAuth.\n\nconst generateGoogleUsername = user => {\n  return (user === null || user === void 0 ? void 0 : user.result.name.split(\" \").join(\"\").toLowerCase()) + String(user === null || user === void 0 ? void 0 : user.result.googleId).slice(0, 3);\n};\n\nconst user = JSON.parse(localStorage.getItem(\"profile\"));\nconst username = (user === null || user === void 0 ? void 0 : user.result.username) || generateGoogleUsername(user); // Action Creators - Must use redux thunk since we are working with asynchronous data\n\nexport const getSuggestion = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchSuggestion(id);\n    dispatch({\n      type: FETCH_SUGGESTION,\n      payload: {\n        suggestion: data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createSuggestion = newSuggestion => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createSuggestion(newSuggestion);\n    dispatch({\n      type: CREATE_SUGGESTION,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updateSuggestion = (id, formData) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.updateSuggestion(id, formData);\n    dispatch({\n      type: UPDATE_SUGGESTION,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deleteSuggestion = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    await api.deleteSuggestion(id);\n    dispatch({\n      type: DELETE_SUGGESTION,\n      payload: id\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; // Returns suggestions that meet filter criteria (category, type, and order)\n// Category - All, UI, UX, Enhancement, Bug, Feature\n// Type - Upvotes or Comments\n// Order - Ascending (Least) or Descending (Most)\n\nexport const filterSuggestions = _ref => {\n  let {\n    category,\n    type,\n    order\n  } = _ref;\n  return async dispatch => {\n    try {\n      dispatch({\n        type: START_LOADING\n      });\n      const {\n        data\n      } = await api.fetchFilteredSuggestions(category, type, order);\n      dispatch({\n        type: FETCH_FILTERED,\n        payload: data\n      });\n      dispatch({\n        type: END_LOADING\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}; // Updates the filters currently selected by the user. This allows for\n// the search to work synchronously despite being in two seperate components.\n// Category component - SuggestionTag.js\n// Upvotes and Comments sort component - SuggestionsBar.js\n\nexport const setFilters = filters => async dispatch => {\n  dispatch({\n    type: CHANGE_FILTERS,\n    payload: filters\n  });\n};\nexport const upvoteSuggestion = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.upvoteSuggestion(id);\n    dispatch({\n      type: UPVOTE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const commentSuggestion = (comment, id) => async dispatch => {\n  var _user$result;\n\n  const commentData = {\n    content: comment,\n    user: {\n      name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name,\n      // Add full name to comment data\n      username: username // Add username to comment data\n\n    }\n  };\n\n  try {\n    const {\n      data\n    } = await api.commentSuggestion(commentData, id);\n    dispatch({\n      type: COMMENT,\n      payload: data\n    });\n    return data.comments; // Return all the comments on the suggestion to reflect comment changes on the front end\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const replyToComment = (comment, id, parentCommentId) => async dispatch => {\n  var _user$result2;\n\n  const replyData = {\n    content: comment,\n    user: {\n      name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name,\n      // Add full name to comment data\n      username: username // Add username to comment data\n\n    }\n  };\n\n  try {\n    const {\n      data\n    } = await api.replyToComment(replyData, id, parentCommentId);\n    dispatch({\n      type: REPLY,\n      payload: data\n    });\n    return data.comments.find(comment => comment._id === parentCommentId).replies;\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/actions/suggestions.js"],"names":["FETCH_FILTERED","FETCH_SUGGESTION","CREATE_SUGGESTION","UPDATE_SUGGESTION","DELETE_SUGGESTION","UPVOTE","COMMENT","REPLY","START_LOADING","END_LOADING","CHANGE_FILTERS","api","generateGoogleUsername","user","result","name","split","join","toLowerCase","String","googleId","slice","JSON","parse","localStorage","getItem","username","getSuggestion","id","dispatch","type","data","fetchSuggestion","payload","suggestion","error","console","log","message","createSuggestion","newSuggestion","updateSuggestion","formData","deleteSuggestion","filterSuggestions","category","order","fetchFilteredSuggestions","setFilters","filters","upvoteSuggestion","commentSuggestion","comment","commentData","content","comments","replyToComment","parentCommentId","replyData","find","_id","replies"],"mappings":"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","sourcesContent":["import {\n  FETCH_FILTERED,\n  FETCH_SUGGESTION,\n  CREATE_SUGGESTION,\n  UPDATE_SUGGESTION,\n  DELETE_SUGGESTION,\n  UPVOTE,\n  COMMENT,\n  REPLY,\n  START_LOADING,\n  END_LOADING,\n  CHANGE_FILTERS,\n} from \"../constants/actionTypes\";\nimport * as api from \"../api\";\n\n// The following code is used to generate a username for users signed in with GoogleOAuth.\nconst generateGoogleUsername = (user) => {\n  return (\n    user?.result.name.split(\" \").join(\"\").toLowerCase() +\n    String(user?.result.googleId).slice(0, 3)\n  );\n};\nconst user = JSON.parse(localStorage.getItem(\"profile\"));\nconst username = user?.result.username || generateGoogleUsername(user);\n\n// Action Creators - Must use redux thunk since we are working with asynchronous data\n\nexport const getSuggestion = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchSuggestion(id);\n\n    dispatch({ type: FETCH_SUGGESTION, payload: { suggestion: data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const createSuggestion = (newSuggestion) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createSuggestion(newSuggestion);\n    dispatch({ type: CREATE_SUGGESTION, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const updateSuggestion = (id, formData) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.updateSuggestion(id, formData);\n    dispatch({ type: UPDATE_SUGGESTION, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const deleteSuggestion = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    await api.deleteSuggestion(id);\n    dispatch({ type: DELETE_SUGGESTION, payload: id });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// Returns suggestions that meet filter criteria (category, type, and order)\n// Category - All, UI, UX, Enhancement, Bug, Feature\n// Type - Upvotes or Comments\n// Order - Ascending (Least) or Descending (Most)\nexport const filterSuggestions =\n  ({ category, type, order }) =>\n  async (dispatch) => {\n    try {\n      dispatch({ type: START_LOADING });\n\n      const { data } = await api.fetchFilteredSuggestions(\n        category,\n        type,\n        order\n      );\n\n      dispatch({ type: FETCH_FILTERED, payload: data });\n      dispatch({ type: END_LOADING });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n// Updates the filters currently selected by the user. This allows for\n// the search to work synchronously despite being in two seperate components.\n// Category component - SuggestionTag.js\n// Upvotes and Comments sort component - SuggestionsBar.js\nexport const setFilters = (filters) => async (dispatch) => {\n  dispatch({ type: CHANGE_FILTERS, payload: filters });\n};\n\nexport const upvoteSuggestion = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.upvoteSuggestion(id);\n    dispatch({ type: UPVOTE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const commentSuggestion = (comment, id) => async (dispatch) => {\n  const commentData = {\n    content: comment,\n    user: {\n      name: user?.result?.name, // Add full name to comment data\n      username: username, // Add username to comment data\n    },\n  };\n\n  try {\n    const { data } = await api.commentSuggestion(commentData, id);\n    dispatch({ type: COMMENT, payload: data });\n    return data.comments; // Return all the comments on the suggestion to reflect comment changes on the front end\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const replyToComment =\n  (comment, id, parentCommentId) => async (dispatch) => {\n    const replyData = {\n      content: comment,\n      user: {\n        name: user?.result?.name, // Add full name to comment data\n        username: username, // Add username to comment data\n      },\n    };\n    try {\n      const { data } = await api.replyToComment(replyData, id, parentCommentId);\n      dispatch({ type: REPLY, payload: data });\n      return data.comments.find((comment) => comment._id === parentCommentId)\n        .replies;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}