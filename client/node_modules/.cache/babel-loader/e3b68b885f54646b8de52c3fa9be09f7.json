{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Main/SuggestionsBar/SuggestionsBar.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { sortByUpvotes } from \"../../../actions/suggestions\";\nimport { useMediaQuery } from \"react-responsive\";\nimport styles from \"./SuggestionsBar.module.css\";\nimport Button from \"../../UI/Button/Button\";\nimport Heading from \"../../UI/Heading/Heading\";\nimport bulbIcon from \"../../../assets/suggestions/icon-suggestions.svg\";\nimport downArrowIcon from \"../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../assets/shared/icon-check.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SuggestionsBar() {\n  _s();\n\n  const isMobile = useMediaQuery({\n    query: \"(min-width: 767px)\"\n  });\n  const [sortingOption, setSortingOption] = useState(\"\"); // Retrieves all of the suggestions\n\n  const suggestions = useSelector(state => state.suggestions);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const dispatch = useDispatch();\n  const sortingOptions = [\"Most Upvotes\", \"Least Upvotes\", \"Most Comments\", \"Least Comments\"];\n  useEffect(() => {\n    setSortingOption(\"Most Upvotes\");\n    const dir = sortingOption.toLowerCase().includes(\"most\") ? \"asc\" : \"desc\";\n    const sortType = sortingOption.toLowerCase().includes(\"upvotes\") ? \"upvotes\" : \"comment\";\n    dispatch(sortByUpvotes({\n      suggestions: suggestions,\n      direction: dir,\n      type: sortType\n    }));\n  }, [sortingOption]);\n\n  const handleDropDown = event => {\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleSortSelection = event => {\n    setMenuOpen(false); // Close the dropdown menu\n\n    setSortingOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n  }; // Displays how many suggestions are available on screen sizes larger than 768px\n\n\n  const suggestionCount = isMobile && /*#__PURE__*/_jsxDEV(Heading, {\n    type: \"h3\",\n    white: true,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: bulbIcon,\n      alt: \"Light bulb signifying an idea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), suggestions.length, \" Suggestions\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.bar,\n    children: [suggestionCount, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"bar__listbox\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"bar__sort_options\"],\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"sort_label\",\n          children: \"Sort by :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDropDown,\n          \"aria-haspopup\": \"listbox\",\n          \"aria-expanded\": \"false\",\n          \"aria-labelledby\": \"sort_label\",\n          children: sortingOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: downArrowIcon,\n          className: `${styles.menuarrow} ${menuOpen && styles[\"menuarrow--active\"]}`,\n          alt: `${menuOpen ? \"Down\" : \"Up\"} arrow`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles[\"bar__dropdown\"]} ${menuOpen && styles[\"bar__dropdown--active\"]}`,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          role: \"listbox\",\n          \"aria-labelledby\": \"sort_label\",\n          children: sortingOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: styles[\"bar__listitem\"],\n            \"aria-selected\": sortingOption === option ? true : false,\n            role: \"option\",\n            tabIndex: \"0\",\n            onClick: handleSortSelection,\n            onKeyPress: handleSortSelection,\n            children: [option, sortingOption === option && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: checkIcon,\n              alt: \"Checkmark\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"violet\",\n      children: \"+ Add Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SuggestionsBar, \"PjA6BE0b47Ayhii7qRmAK0ES4xk=\", false, function () {\n  return [useMediaQuery, useSelector, useDispatch];\n});\n\n_c = SuggestionsBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestionsBar\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Main/SuggestionsBar/SuggestionsBar.js"],"names":["useState","useEffect","useSelector","useDispatch","sortByUpvotes","useMediaQuery","styles","Button","Heading","bulbIcon","downArrowIcon","checkIcon","SuggestionsBar","isMobile","query","sortingOption","setSortingOption","suggestions","state","menuOpen","setMenuOpen","dispatch","sortingOptions","dir","toLowerCase","includes","sortType","direction","type","handleDropDown","event","target","setAttribute","handleSortSelection","innerText","suggestionCount","length","bar","menuarrow","map","option","index"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,OAAOC,aAAP,MAA0B,4CAA1B;AACA,OAAOC,SAAP,MAAsB,uCAAtB;;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AACvC,QAAMC,QAAQ,GAAGR,aAAa,CAAC;AAAES,IAAAA,KAAK,EAAE;AAAT,GAAD,CAA9B;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,EAAD,CAAlD,CAFuC,CAGvC;;AACA,QAAMiB,WAAW,GAAGf,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACD,WAAlB,CAA/B;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMqB,QAAQ,GAAGlB,WAAW,EAA5B;AACA,QAAMmB,cAAc,GAAG,CACrB,cADqB,EAErB,eAFqB,EAGrB,eAHqB,EAIrB,gBAJqB,CAAvB;AAOArB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,gBAAgB,CAAC,cAAD,CAAhB;AACA,UAAMO,GAAG,GAAGR,aAAa,CAACS,WAAd,GAA4BC,QAA5B,CAAqC,MAArC,IAA+C,KAA/C,GAAuD,MAAnE;AACA,UAAMC,QAAQ,GAAGX,aAAa,CAACS,WAAd,GAA4BC,QAA5B,CAAqC,SAArC,IACb,SADa,GAEb,SAFJ;AAGAJ,IAAAA,QAAQ,CACNjB,aAAa,CAAC;AACZa,MAAAA,WAAW,EAAEA,WADD;AAEZU,MAAAA,SAAS,EAAEJ,GAFC;AAGZK,MAAAA,IAAI,EAAEF;AAHM,KAAD,CADP,CAAR;AAOD,GAbQ,EAaN,CAACX,aAAD,CAbM,CAAT;;AAeA,QAAMc,cAAc,GAAIC,KAAD,IAAW;AAChCV,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX,CADgC,CACR;;AACxBW,IAAAA,KAAK,CAACC,MAAN,CAAaC,YAAb,CAA0B,eAA1B,EAA2Cb,QAA3C,EAFgC,CAEsB;AACvD,GAHD;;AAKA,QAAMc,mBAAmB,GAAIH,KAAD,IAAW;AACrCV,IAAAA,WAAW,CAAC,KAAD,CAAX,CADqC,CACjB;;AACpBJ,IAAAA,gBAAgB,CAACc,KAAK,CAACC,MAAN,CAAaG,SAAd,CAAhB,CAFqC,CAEK;AAC3C,GAHD,CAlCuC,CAuCvC;;;AACA,QAAMC,eAAe,GAAGtB,QAAQ,iBAC9B,QAAC,OAAD;AAAS,IAAA,IAAI,EAAC,IAAd;AAAmB,IAAA,KAAK,EAAE,IAA1B;AAAA,4BACE;AAAK,MAAA,GAAG,EAAEJ,QAAV;AAAoB,MAAA,GAAG,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGQ,WAAW,CAACmB,MAFf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,sBACE;AAAS,IAAA,SAAS,EAAE9B,MAAM,CAAC+B,GAA3B;AAAA,eACGF,eADH,eAGE;AAAK,MAAA,SAAS,EAAE7B,MAAM,CAAC,cAAD,CAAtB;AAAA,8BAEE;AAAK,QAAA,SAAS,EAAEA,MAAM,CAAC,mBAAD,CAAtB;AAAA,gCACE;AAAM,UAAA,EAAE,EAAC,YAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,OAAO,EAAEuB,cADX;AAEE,2BAAc,SAFhB;AAGE,2BAAc,OAHhB;AAIE,6BAAgB,YAJlB;AAAA,oBAMGd;AANH;AAAA;AAAA;AAAA;AAAA,gBAFF,eAUE;AACE,UAAA,GAAG,EAAEL,aADP;AAEE,UAAA,SAAS,EAAG,GAAEJ,MAAM,CAACgC,SAAU,IAC7BnB,QAAQ,IAAIb,MAAM,CAAC,mBAAD,CACnB,EAJH;AAKE,UAAA,GAAG,EAAG,GAAEa,QAAQ,GAAG,MAAH,GAAY,IAAK;AALnC;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAsBE;AACE,QAAA,SAAS,EAAG,GAAEb,MAAM,CAAC,eAAD,CAAkB,IACpCa,QAAQ,IAAIb,MAAM,CAAC,uBAAD,CACnB,EAHH;AAAA,+BAKE;AAAI,UAAA,IAAI,EAAC,SAAT;AAAmB,6BAAgB,YAAnC;AAAA,oBACGgB,cAAc,CAACiB,GAAf,CAAmB,CAACC,MAAD,EAASC,KAAT,kBAClB;AAEE,YAAA,SAAS,EAAEnC,MAAM,CAAC,eAAD,CAFnB;AAGE,6BAAeS,aAAa,KAAKyB,MAAlB,GAA2B,IAA3B,GAAkC,KAHnD;AAIE,YAAA,IAAI,EAAC,QAJP;AAKE,YAAA,QAAQ,EAAC,GALX;AAME,YAAA,OAAO,EAAEP,mBANX;AAOE,YAAA,UAAU,EAAEA,mBAPd;AAAA,uBAUGO,MAVH,EAaGzB,aAAa,KAAKyB,MAAlB,iBACC;AAAK,cAAA,GAAG,EAAE7B,SAAV;AAAqB,cAAA,GAAG,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,oBAdJ;AAAA,aACO8B,KADP;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAsDE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0DD;;GAzGuB7B,c;UACLP,a,EAGGH,W,EAEHC,W;;;KANKS,c","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { sortByUpvotes } from \"../../../actions/suggestions\";\nimport { useMediaQuery } from \"react-responsive\";\nimport styles from \"./SuggestionsBar.module.css\";\nimport Button from \"../../UI/Button/Button\";\nimport Heading from \"../../UI/Heading/Heading\";\nimport bulbIcon from \"../../../assets/suggestions/icon-suggestions.svg\";\nimport downArrowIcon from \"../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../assets/shared/icon-check.svg\";\n\nexport default function SuggestionsBar() {\n  const isMobile = useMediaQuery({ query: \"(min-width: 767px)\" });\n  const [sortingOption, setSortingOption] = useState(\"\");\n  // Retrieves all of the suggestions\n  const suggestions = useSelector((state) => state.suggestions);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const dispatch = useDispatch();\n  const sortingOptions = [\n    \"Most Upvotes\",\n    \"Least Upvotes\",\n    \"Most Comments\",\n    \"Least Comments\",\n  ];\n\n  useEffect(() => {\n    setSortingOption(\"Most Upvotes\");\n    const dir = sortingOption.toLowerCase().includes(\"most\") ? \"asc\" : \"desc\";\n    const sortType = sortingOption.toLowerCase().includes(\"upvotes\")\n      ? \"upvotes\"\n      : \"comment\";\n    dispatch(\n      sortByUpvotes({\n        suggestions: suggestions,\n        direction: dir,\n        type: sortType,\n      })\n    );\n  }, [sortingOption]);\n\n  const handleDropDown = (event) => {\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleSortSelection = (event) => {\n    setMenuOpen(false); // Close the dropdown menu\n    setSortingOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n  };\n\n  // Displays how many suggestions are available on screen sizes larger than 768px\n  const suggestionCount = isMobile && (\n    <Heading type=\"h3\" white={true}>\n      <img src={bulbIcon} alt=\"Light bulb signifying an idea\" />\n      {suggestions.length} Suggestions\n    </Heading>\n  );\n\n  return (\n    <section className={styles.bar}>\n      {suggestionCount}\n\n      <div className={styles[\"bar__listbox\"]}>\n        {/* Container for the label, the dropdown button, and the up/down arrow */}\n        <div className={styles[\"bar__sort_options\"]}>\n          <span id=\"sort_label\">Sort by :</span>\n          <button\n            onClick={handleDropDown}\n            aria-haspopup=\"listbox\"\n            aria-expanded=\"false\"\n            aria-labelledby=\"sort_label\"\n          >\n            {sortingOption}\n          </button>\n          <img\n            src={downArrowIcon}\n            className={`${styles.menuarrow} ${\n              menuOpen && styles[\"menuarrow--active\"]\n            }`}\n            alt={`${menuOpen ? \"Down\" : \"Up\"} arrow`}\n          />\n        </div>\n\n        {/* Dropdown pop up */}\n        <div\n          className={`${styles[\"bar__dropdown\"]} ${\n            menuOpen && styles[\"bar__dropdown--active\"]\n          }`}\n        >\n          <ul role=\"listbox\" aria-labelledby=\"sort_label\">\n            {sortingOptions.map((option, index) => (\n              <li\n                key={index}\n                className={styles[\"bar__listitem\"]}\n                aria-selected={sortingOption === option ? true : false}\n                role=\"option\"\n                tabIndex=\"0\"\n                onClick={handleSortSelection}\n                onKeyPress={handleSortSelection}\n              >\n                {/* Option text */}\n                {option}\n\n                {/* If a list item is currently selected, display a checkmark */}\n                {sortingOption === option && (\n                  <img src={checkIcon} alt=\"Checkmark\" />\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <Button type=\"violet\">+ Add Feedback</Button>\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}