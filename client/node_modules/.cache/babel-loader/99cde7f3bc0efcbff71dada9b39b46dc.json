{"ast":null,"code":"import _slicedToArray from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import styles from\"./ProjectRoadmapPage.module.css\";import Heading from\"../UI/Heading/Heading\";import BackButton from\"../UI/BackButton/BackButton\";import Button from\"../UI/Button/Button\";import{filterSuggestions}from\"../../actions/suggestions\";import{Roadmap}from\"./Roadmap/Roadmap\";import{RoadmapFilters}from\"./RoadmapFilters/RoadmapFilters\";import{MobileRoadmap}from\"./MobileRoadmap/MobileRoadmap\";import{useMediaQuery}from\"react-responsive\";import{useDispatch}from\"react-redux\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var ProjectRoadmapPage=function ProjectRoadmapPage(){var isMobile=useMediaQuery({query:\"(max-width: 767px)\"});var _useState=useState(\"Planned\"),_useState2=_slicedToArray(_useState,2),mobileFilter=_useState2[0],setMobileFilter=_useState2[1];var dispatch=useDispatch();// Sort by Most Upvotes on component mount to prevent\n// errors if a user refreshes the page\nuseEffect(function(){dispatch(filterSuggestions({category:\"All\",type:\"upvotes\",order:\"desc\"}));},[]);return/*#__PURE__*/_jsxs(\"main\",{className:styles.roadmap,children:[/*#__PURE__*/_jsxs(\"header\",{className:styles[\"roadmap__header\"],children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(BackButton,{white:true}),/*#__PURE__*/_jsx(Heading,{type:\"h1\",white:true,children:\"Roadmap\"})]}),/*#__PURE__*/_jsx(Button,{btnStyle:\"violet\",text:\"+ Add Feedback\",link:true,destination:\"/create-feedback\"})]}),isMobile&&/*#__PURE__*/_jsx(RoadmapFilters,{setFilter:setMobileFilter}),isMobile&&/*#__PURE__*/_jsx(MobileRoadmap,{filter:mobileFilter}),!isMobile&&/*#__PURE__*/_jsx(Roadmap,{})]});};","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/ProjectRoadmapPage/ProjectRoadmapPage.js"],"names":["React","useEffect","useState","styles","Heading","BackButton","Button","filterSuggestions","Roadmap","RoadmapFilters","MobileRoadmap","useMediaQuery","useDispatch","ProjectRoadmapPage","isMobile","query","mobileFilter","setMobileFilter","dispatch","category","type","order","roadmap"],"mappings":"mIAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,iCAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CACA,MAAOC,CAAAA,UAAP,KAAuB,6BAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,OAASC,iBAAT,KAAkC,2BAAlC,CACA,OAASC,OAAT,KAAwB,mBAAxB,CACA,OAASC,cAAT,KAA+B,iCAA/B,CACA,OAASC,aAAT,KAA8B,+BAA9B,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,OAASC,WAAT,KAA4B,aAA5B,C,wFAEA,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,GAAMC,CAAAA,QAAQ,CAAGH,aAAa,CAAC,CAAEI,KAAK,CAAE,oBAAT,CAAD,CAA9B,CACA,cAAwCb,QAAQ,CAAC,SAAD,CAAhD,wCAAOc,YAAP,eAAqBC,eAArB,eACA,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CAEA;AACA;AACAX,SAAS,CAAC,UAAM,CACdiB,QAAQ,CACNX,iBAAiB,CAAC,CAChBY,QAAQ,CAAE,KADM,CAEhBC,IAAI,CAAE,SAFU,CAGhBC,KAAK,CAAE,MAHS,CAAD,CADX,CAAR,CAOD,CARQ,CAQN,EARM,CAAT,CAUA,mBACE,cAAM,SAAS,CAAElB,MAAM,CAACmB,OAAxB,wBACE,gBAAQ,SAAS,CAAEnB,MAAM,CAAC,iBAAD,CAAzB,wBACE,oCACE,KAAC,UAAD,EAAY,KAAK,CAAE,IAAnB,EADF,cAEE,KAAC,OAAD,EAAS,IAAI,CAAC,IAAd,CAAmB,KAAK,CAAE,IAA1B,qBAFF,GADF,cAQE,KAAC,MAAD,EACE,QAAQ,CAAC,QADX,CAEE,IAAI,CAAC,gBAFP,CAGE,IAAI,CAAE,IAHR,CAIE,WAAW,CAAC,kBAJd,EARF,GADF,CAiBGW,QAAQ,eAAI,KAAC,cAAD,EAAgB,SAAS,CAAEG,eAA3B,EAjBf,CAkBGH,QAAQ,eAAI,KAAC,aAAD,EAAe,MAAM,CAAEE,YAAvB,EAlBf,CAmBG,CAACF,QAAD,eAAa,KAAC,OAAD,IAnBhB,GADF,CAuBD,CAxCM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"./ProjectRoadmapPage.module.css\";\nimport Heading from \"../UI/Heading/Heading\";\nimport BackButton from \"../UI/BackButton/BackButton\";\nimport Button from \"../UI/Button/Button\";\nimport { filterSuggestions } from \"../../actions/suggestions\";\nimport { Roadmap } from \"./Roadmap/Roadmap\";\nimport { RoadmapFilters } from \"./RoadmapFilters/RoadmapFilters\";\nimport { MobileRoadmap } from \"./MobileRoadmap/MobileRoadmap\";\nimport { useMediaQuery } from \"react-responsive\";\nimport { useDispatch } from \"react-redux\";\n\nexport const ProjectRoadmapPage = () => {\n  const isMobile = useMediaQuery({ query: \"(max-width: 767px)\" });\n  const [mobileFilter, setMobileFilter] = useState(\"Planned\");\n  const dispatch = useDispatch();\n\n  // Sort by Most Upvotes on component mount to prevent\n  // errors if a user refreshes the page\n  useEffect(() => {\n    dispatch(\n      filterSuggestions({\n        category: \"All\",\n        type: \"upvotes\",\n        order: \"desc\",\n      })\n    );\n  }, []);\n\n  return (\n    <main className={styles.roadmap}>\n      <header className={styles[\"roadmap__header\"]}>\n        <div>\n          <BackButton white={true} />\n          <Heading type=\"h1\" white={true}>\n            Roadmap\n          </Heading>\n        </div>\n\n        <Button\n          btnStyle=\"violet\"\n          text=\"+ Add Feedback\"\n          link={true}\n          destination=\"/create-feedback\"\n        />\n      </header>\n\n      {isMobile && <RoadmapFilters setFilter={setMobileFilter} />}\n      {isMobile && <MobileRoadmap filter={mobileFilter} />}\n      {!isMobile && <Roadmap />}\n    </main>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}