{"ast":null,"code":"import axios from\"axios\";var API=axios.create({baseURL:\"https://product-feedback-board.herokuapp.com/\"});// This occurs before every individual API request.\n// Sends the token to the backend to verify the client is logged in.\n// The middleware in the backend checks the request headers for a token.\nAPI.interceptors.request.use(function(req){if(localStorage.getItem(\"profile\")){req.headers.Authorization=\"Bearer \".concat(JSON.parse(localStorage.getItem(\"profile\")).token);}return req;});export var fetchSuggestion=function fetchSuggestion(id){return API.get(\"/suggestions/\".concat(id));};export var fetchFilteredSuggestions=function fetchFilteredSuggestions(category,type,order){return API.get(\"/suggestions/filter?category=\".concat(category,\"&type=\").concat(type,\"&order=\").concat(order));};export var createSuggestion=function createSuggestion(newSuggestion){return API.post(\"/suggestions\",newSuggestion);};export var updateSuggestion=function updateSuggestion(id,formData){return API.patch(\"/suggestions/\".concat(id),formData);};export var deleteSuggestion=function deleteSuggestion(id){return API.delete(\"/suggestions/\".concat(id));};export var upvoteSuggestion=function upvoteSuggestion(id){return API.patch(\"/suggestions/\".concat(id,\"/upvote\"));};export var commentSuggestion=function commentSuggestion(comment,id){return API.post(\"/suggestions/\".concat(id,\"/comment\"),{comment:comment});};export var replyToComment=function replyToComment(comment,id,parentCommentId){return API.post(\"/suggestions/\".concat(id,\"/comment/reply\"),{comment:comment,parentCommentId:parentCommentId});};export var signIn=function signIn(formData){return API.post(\"/user/signin\",formData);};export var signUp=function signUp(formData){return API.post(\"/user/signup\",formData);};export var deleteComment=function deleteComment(suggestionId,commentId){return API.delete(\"/suggestions/\".concat(suggestionId,\"/comment/\").concat(commentId));};","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/api/index.js"],"names":["axios","API","create","baseURL","interceptors","request","use","req","localStorage","getItem","headers","Authorization","JSON","parse","token","fetchSuggestion","id","get","fetchFilteredSuggestions","category","type","order","createSuggestion","newSuggestion","post","updateSuggestion","formData","patch","deleteSuggestion","delete","upvoteSuggestion","commentSuggestion","comment","replyToComment","parentCommentId","signIn","signUp","deleteComment","suggestionId","commentId"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,GAAG,CAAGD,KAAK,CAACE,MAAN,CAAa,CACvBC,OAAO,CAAE,+CADc,CAAb,CAAZ,CAIA;AACA;AACA;AACAF,GAAG,CAACG,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,SAACC,GAAD,CAAS,CACpC,GAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAJ,CAAqC,CACnCF,GAAG,CAACG,OAAJ,CAAYC,aAAZ,kBACEC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,EAA4CK,KAD9C,EAGD,CAED,MAAOP,CAAAA,GAAP,CACD,CARD,EAUA,MAAO,IAAMQ,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,EAAD,QAAQf,CAAAA,GAAG,CAACgB,GAAJ,wBAAwBD,EAAxB,EAAR,EAAxB,CAEP,MAAO,IAAME,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,QAAD,CAAWC,IAAX,CAAiBC,KAAjB,QACtCpB,CAAAA,GAAG,CAACgB,GAAJ,wCACkCE,QADlC,kBACmDC,IADnD,mBACiEC,KADjE,EADsC,EAAjC,CAKP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,aAAD,QAC9BtB,CAAAA,GAAG,CAACuB,IAAJ,CAAS,cAAT,CAAyBD,aAAzB,CAD8B,EAAzB,CAGP,MAAO,IAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACT,EAAD,CAAKU,QAAL,QAC9BzB,CAAAA,GAAG,CAAC0B,KAAJ,wBAA0BX,EAA1B,EAAgCU,QAAhC,CAD8B,EAAzB,CAGP,MAAO,IAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACZ,EAAD,QAAQf,CAAAA,GAAG,CAAC4B,MAAJ,wBAA2Bb,EAA3B,EAAR,EAAzB,CAEP,MAAO,IAAMc,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACd,EAAD,QAAQf,CAAAA,GAAG,CAAC0B,KAAJ,wBAA0BX,EAA1B,YAAR,EAAzB,CACP,MAAO,IAAMe,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,OAAD,CAAUhB,EAAV,QAC/Bf,CAAAA,GAAG,CAACuB,IAAJ,wBAAyBR,EAAzB,aAAuC,CAAEgB,OAAO,CAAPA,OAAF,CAAvC,CAD+B,EAA1B,CAGP,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACD,OAAD,CAAUhB,EAAV,CAAckB,eAAd,QAC5BjC,CAAAA,GAAG,CAACuB,IAAJ,wBAAyBR,EAAzB,mBAA6C,CAAEgB,OAAO,CAAPA,OAAF,CAAWE,eAAe,CAAfA,eAAX,CAA7C,CAD4B,EAAvB,CAGP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACT,QAAD,QAAczB,CAAAA,GAAG,CAACuB,IAAJ,CAAS,cAAT,CAAyBE,QAAzB,CAAd,EAAf,CACP,MAAO,IAAMU,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACV,QAAD,QAAczB,CAAAA,GAAG,CAACuB,IAAJ,CAAS,cAAT,CAAyBE,QAAzB,CAAd,EAAf,CAEP,MAAO,IAAMW,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,YAAD,CAAeC,SAAf,QAC3BtC,CAAAA,GAAG,CAAC4B,MAAJ,wBAA2BS,YAA3B,qBAAmDC,SAAnD,EAD2B,EAAtB","sourcesContent":["import axios from \"axios\";\n\nconst API = axios.create({\n  baseURL: \"https://product-feedback-board.herokuapp.com/\",\n});\n\n// This occurs before every individual API request.\n// Sends the token to the backend to verify the client is logged in.\n// The middleware in the backend checks the request headers for a token.\nAPI.interceptors.request.use((req) => {\n  if (localStorage.getItem(\"profile\")) {\n    req.headers.Authorization = `Bearer ${\n      JSON.parse(localStorage.getItem(\"profile\")).token\n    }`;\n  }\n\n  return req;\n});\n\nexport const fetchSuggestion = (id) => API.get(`/suggestions/${id}`);\n\nexport const fetchFilteredSuggestions = (category, type, order) =>\n  API.get(\n    `/suggestions/filter?category=${category}&type=${type}&order=${order}`\n  );\n\nexport const createSuggestion = (newSuggestion) =>\n  API.post(\"/suggestions\", newSuggestion);\n\nexport const updateSuggestion = (id, formData) =>\n  API.patch(`/suggestions/${id}`, formData);\n\nexport const deleteSuggestion = (id) => API.delete(`/suggestions/${id}`);\n\nexport const upvoteSuggestion = (id) => API.patch(`/suggestions/${id}/upvote`);\nexport const commentSuggestion = (comment, id) =>\n  API.post(`/suggestions/${id}/comment`, { comment });\n\nexport const replyToComment = (comment, id, parentCommentId) =>\n  API.post(`/suggestions/${id}/comment/reply`, { comment, parentCommentId });\n\nexport const signIn = (formData) => API.post(\"/user/signin\", formData);\nexport const signUp = (formData) => API.post(\"/user/signup\", formData);\n\nexport const deleteComment = (suggestionId, commentId) =>\n  API.delete(`/suggestions/${suggestionId}/comment/${commentId}`);\n"]},"metadata":{},"sourceType":"module"}