{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsBar/SuggestionsBar.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterSuggestions, setFilters } from \"../../../../actions/suggestions\";\nimport { useMediaQuery } from \"react-responsive\";\nimport styles from \"./SuggestionsBar.module.css\";\nimport Button from \"../../../UI/Button/Button\";\nimport Heading from \"../../../UI/Heading/Heading\";\nimport bulbIcon from \"../../../../assets/suggestions/icon-suggestions.svg\";\nimport { DropDownMenu } from \"../../../UI/DropDownMenu/DropDownMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SuggestionsBar() {\n  _s();\n\n  const isMobile = useMediaQuery({\n    query: \"(max-width: 767px)\"\n  });\n  const sortingOptions = [\"Most Upvotes\", \"Least Upvotes\", \"Most Comments\", \"Least Comments\"];\n  const [option, setOption] = useState(\"Most Upvotes\"); // Retrieves all of the suggestions and filters that are selected\n\n  const {\n    suggestions,\n    filters: {\n      sortCategory,\n      sortType,\n      sortOrder\n    }\n  } = useSelector(state => state.suggestions);\n  const dispatch = useDispatch(); // Sort by Most Upvotes on component mount\n\n  useEffect(() => {\n    dispatch(filterSuggestions({\n      category: \"All\",\n      type: \"upvotes\",\n      order: \"desc\"\n    }));\n  }, []); // Listen for each time a new sorting option is selected and update state\n\n  useEffect(() => {\n    // Determine the sort order (ascending/descending) and type (upvotes/comments)\n    const order = option.includes(\"Most\") ? \"desc\" : \"asc\";\n    const type = option.includes(\"Upvotes\") ? \"upvotes\" : \"comments\"; // Update the sorting filters\n\n    dispatch(setFilters({\n      sortCategory: sortCategory,\n      sortType: type,\n      sortOrder: order\n    })); // Sort data depending on order (most/least) and type(upvotes/comments)\n\n    dispatch(filterSuggestions({\n      category: sortCategory,\n      type: sortType,\n      order: sortOrder\n    }));\n  }, [option, sortCategory, sortType, sortOrder, dispatch]); // Displays how many suggestions are available on screen sizes larger than 768px\n\n  const suggestionCount = !isMobile && /*#__PURE__*/_jsxDEV(Heading, {\n    type: \"h3\",\n    white: true,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: bulbIcon,\n      alt: \"Light bulb signifying an idea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), suggestions.length, \" Suggestions\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: `${styles.bar} ${isMobile && styles[\"bar--sticky\"]}`,\n    children: [suggestionCount, /*#__PURE__*/_jsxDEV(DropDownMenu, {\n      listOptions: sortingOptions,\n      setOption: setOption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      btnStyle: \"violet\",\n      text: \"+ Add Feedback\",\n      link: true,\n      destination: \"create-feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SuggestionsBar, \"21d/oKJ3iUNWEVXm1ULbGt/xUk4=\", false, function () {\n  return [useMediaQuery, useSelector, useDispatch];\n});\n\n_c = SuggestionsBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestionsBar\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsBar/SuggestionsBar.js"],"names":["useState","useEffect","useSelector","useDispatch","filterSuggestions","setFilters","useMediaQuery","styles","Button","Heading","bulbIcon","DropDownMenu","SuggestionsBar","isMobile","query","sortingOptions","option","setOption","suggestions","filters","sortCategory","sortType","sortOrder","state","dispatch","category","type","order","includes","suggestionCount","length","bar"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,iCAA9C;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,QAAP,MAAqB,qDAArB;AACA,SAASC,YAAT,QAA6B,uCAA7B;;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AACvC,QAAMC,QAAQ,GAAGP,aAAa,CAAC;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAAD,CAA9B;AACA,QAAMC,cAAc,GAAG,CACrB,cADqB,EAErB,eAFqB,EAGrB,eAHqB,EAIrB,gBAJqB,CAAvB;AAMA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,cAAD,CAApC,CARuC,CAUvC;;AACA,QAAM;AACJkB,IAAAA,WADI;AAEJC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA,QAAhB;AAA0BC,MAAAA;AAA1B;AAFL,MAGFpB,WAAW,CAAEqB,KAAD,IAAWA,KAAK,CAACL,WAAlB,CAHf;AAKA,QAAMM,QAAQ,GAAGrB,WAAW,EAA5B,CAhBuC,CAkBvC;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,QAAQ,CACNpB,iBAAiB,CAAC;AAChBqB,MAAAA,QAAQ,EAAE,KADM;AAEhBC,MAAAA,IAAI,EAAE,SAFU;AAGhBC,MAAAA,KAAK,EAAE;AAHS,KAAD,CADX,CAAR;AAOD,GARQ,EAQN,EARM,CAAT,CAnBuC,CA6BvC;;AACA1B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAM0B,KAAK,GAAGX,MAAM,CAACY,QAAP,CAAgB,MAAhB,IAA0B,MAA1B,GAAmC,KAAjD;AACA,UAAMF,IAAI,GAAGV,MAAM,CAACY,QAAP,CAAgB,SAAhB,IAA6B,SAA7B,GAAyC,UAAtD,CAHc,CAKd;;AACAJ,IAAAA,QAAQ,CACNnB,UAAU,CAAC;AACTe,MAAAA,YAAY,EAAEA,YADL;AAETC,MAAAA,QAAQ,EAAEK,IAFD;AAGTJ,MAAAA,SAAS,EAAEK;AAHF,KAAD,CADJ,CAAR,CANc,CAcd;;AACAH,IAAAA,QAAQ,CACNpB,iBAAiB,CAAC;AAChBqB,MAAAA,QAAQ,EAAEL,YADM;AAEhBM,MAAAA,IAAI,EAAEL,QAFU;AAGhBM,MAAAA,KAAK,EAAEL;AAHS,KAAD,CADX,CAAR;AAOD,GAtBQ,EAsBN,CAACN,MAAD,EAASI,YAAT,EAAuBC,QAAvB,EAAiCC,SAAjC,EAA4CE,QAA5C,CAtBM,CAAT,CA9BuC,CAsDvC;;AACA,QAAMK,eAAe,GAAG,CAAChB,QAAD,iBACtB,QAAC,OAAD;AAAS,IAAA,IAAI,EAAC,IAAd;AAAmB,IAAA,KAAK,EAAE,IAA1B;AAAA,4BACE;AAAK,MAAA,GAAG,EAAEH,QAAV;AAAoB,MAAA,GAAG,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGQ,WAAW,CAACY,MAFf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAOA,sBACE;AAAS,IAAA,SAAS,EAAG,GAAEvB,MAAM,CAACwB,GAAI,IAAGlB,QAAQ,IAAIN,MAAM,CAAC,aAAD,CAAgB,EAAvE;AAAA,eACGsB,eADH,eAGE,QAAC,YAAD;AAAc,MAAA,WAAW,EAAEd,cAA3B;AAA2C,MAAA,SAAS,EAAEE;AAAtD;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE,QAAC,MAAD;AACE,MAAA,QAAQ,EAAC,QADX;AAEE,MAAA,IAAI,EAAC,gBAFP;AAGE,MAAA,IAAI,EAAE,IAHR;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA5EuBL,c;UACLN,a,EAabJ,W,EAEaC,W;;;KAhBKS,c","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterSuggestions, setFilters } from \"../../../../actions/suggestions\";\nimport { useMediaQuery } from \"react-responsive\";\nimport styles from \"./SuggestionsBar.module.css\";\nimport Button from \"../../../UI/Button/Button\";\nimport Heading from \"../../../UI/Heading/Heading\";\nimport bulbIcon from \"../../../../assets/suggestions/icon-suggestions.svg\";\nimport { DropDownMenu } from \"../../../UI/DropDownMenu/DropDownMenu\";\n\nexport default function SuggestionsBar() {\n  const isMobile = useMediaQuery({ query: \"(max-width: 767px)\" });\n  const sortingOptions = [\n    \"Most Upvotes\",\n    \"Least Upvotes\",\n    \"Most Comments\",\n    \"Least Comments\",\n  ];\n  const [option, setOption] = useState(\"Most Upvotes\");\n\n  // Retrieves all of the suggestions and filters that are selected\n  const {\n    suggestions,\n    filters: { sortCategory, sortType, sortOrder },\n  } = useSelector((state) => state.suggestions);\n\n  const dispatch = useDispatch();\n\n  // Sort by Most Upvotes on component mount\n  useEffect(() => {\n    dispatch(\n      filterSuggestions({\n        category: \"All\",\n        type: \"upvotes\",\n        order: \"desc\",\n      })\n    );\n  }, []);\n\n  // Listen for each time a new sorting option is selected and update state\n  useEffect(() => {\n    // Determine the sort order (ascending/descending) and type (upvotes/comments)\n    const order = option.includes(\"Most\") ? \"desc\" : \"asc\";\n    const type = option.includes(\"Upvotes\") ? \"upvotes\" : \"comments\";\n\n    // Update the sorting filters\n    dispatch(\n      setFilters({\n        sortCategory: sortCategory,\n        sortType: type,\n        sortOrder: order,\n      })\n    );\n\n    // Sort data depending on order (most/least) and type(upvotes/comments)\n    dispatch(\n      filterSuggestions({\n        category: sortCategory,\n        type: sortType,\n        order: sortOrder,\n      })\n    );\n  }, [option, sortCategory, sortType, sortOrder, dispatch]);\n\n  // Displays how many suggestions are available on screen sizes larger than 768px\n  const suggestionCount = !isMobile && (\n    <Heading type=\"h3\" white={true}>\n      <img src={bulbIcon} alt=\"Light bulb signifying an idea\" />\n      {suggestions.length} Suggestions\n    </Heading>\n  );\n\n  return (\n    <section className={`${styles.bar} ${isMobile && styles[\"bar--sticky\"]}`}>\n      {suggestionCount}\n\n      <DropDownMenu listOptions={sortingOptions} setOption={setOption} />\n\n      <Button\n        btnStyle=\"violet\"\n        text=\"+ Add Feedback\"\n        link={true}\n        destination=\"create-feedback\"\n      />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}