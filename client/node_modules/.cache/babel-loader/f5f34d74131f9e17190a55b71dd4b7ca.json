{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Main/SuggestionsFeed/SuggestionsFeed.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./SuggestionsFeed.module.css\";\nimport { useSelector } from \"react-redux\";\nimport Suggestion from \"./Suggestion/Suggestion\";\nimport NoSuggestions from \"./NoSuggestions.js/NoSuggestions\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"animate.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SuggestionsFeed() {\n  _s();\n\n  // Retrieves all of the suggestions\n  const suggestions = useSelector(state => state.suggestions);\n  const suggestionsAvailable = suggestions.length !== 0;\n  const suggestionCards = suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Suggestion, {\n    suggestionData: suggestion\n  }, suggestion[\"_id\"], false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this)); // As long as there are suggestions, display all of the available suggestion cards.\n  // If there are no suggestions, display the no suggestions screen.\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: suggestionsAvailable ? styles.suggestions : styles[\"suggetions--empty\"],\n    children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n      timeout: 500,\n      mountOnEnter: true,\n      mountOnExit: true,\n      classNames: {\n        enterActive: \"animate__fadeInUp\",\n        exitActive: \"animate__fadeOutDown\"\n      },\n      children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Suggestion, {\n        suggestionData: suggestion\n      }, suggestion[\"_id\"], false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SuggestionsFeed, \"zSd8RIyqs/v9HMKz47CigWy1HHw=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuggestionsFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestionsFeed\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Main/SuggestionsFeed/SuggestionsFeed.js"],"names":["styles","useSelector","Suggestion","NoSuggestions","CSSTransition","SuggestionsFeed","suggestions","state","suggestionsAvailable","length","suggestionCards","map","suggestion","enterActive","exitActive"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,8BAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAO,aAAP;;AACA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AACxC;AACA,QAAMC,WAAW,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACD,WAAlB,CAA/B;AACA,QAAME,oBAAoB,GAAGF,WAAW,CAACG,MAAZ,KAAuB,CAApD;AAEA,QAAMC,eAAe,GAAGJ,WAAW,CAACK,GAAZ,CAAiBC,UAAD,iBACtC,QAAC,UAAD;AAAoC,IAAA,cAAc,EAAEA;AAApD,KAAiBA,UAAU,CAAC,KAAD,CAA3B;AAAA;AAAA;AAAA;AAAA,UADsB,CAAxB,CALwC,CASxC;AACA;;AACA,sBACE;AACE,IAAA,SAAS,EACPJ,oBAAoB,GAAGR,MAAM,CAACM,WAAV,GAAwBN,MAAM,CAAC,mBAAD,CAFtD;AAAA,2BAKE,QAAC,aAAD;AACE,MAAA,OAAO,EAAE,GADX;AAEE,MAAA,YAAY,MAFd;AAGE,MAAA,WAAW,MAHb;AAIE,MAAA,UAAU,EAAE;AACVa,QAAAA,WAAW,EAAE,mBADH;AAEVC,QAAAA,UAAU,EAAE;AAFF,OAJd;AAAA,gBASGR,WAAW,CAACK,GAAZ,CAAiBC,UAAD,iBACf,QAAC,UAAD;AAAoC,QAAA,cAAc,EAAEA;AAApD,SAAiBA,UAAU,CAAC,KAAD,CAA3B;AAAA;AAAA;AAAA;AAAA,cADD;AATH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAhCuBP,e;UAEFJ,W;;;KAFEI,e","sourcesContent":["import styles from \"./SuggestionsFeed.module.css\";\nimport { useSelector } from \"react-redux\";\nimport Suggestion from \"./Suggestion/Suggestion\";\nimport NoSuggestions from \"./NoSuggestions.js/NoSuggestions\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"animate.css\";\nexport default function SuggestionsFeed() {\n  // Retrieves all of the suggestions\n  const suggestions = useSelector((state) => state.suggestions);\n  const suggestionsAvailable = suggestions.length !== 0;\n\n  const suggestionCards = suggestions.map((suggestion) => (\n    <Suggestion key={suggestion[\"_id\"]} suggestionData={suggestion} />\n  ));\n\n  // As long as there are suggestions, display all of the available suggestion cards.\n  // If there are no suggestions, display the no suggestions screen.\n  return (\n    <section\n      className={\n        suggestionsAvailable ? styles.suggestions : styles[\"suggetions--empty\"]\n      }\n    >\n      <CSSTransition\n        timeout={500}\n        mountOnEnter\n        mountOnExit\n        classNames={{\n          enterActive: \"animate__fadeInUp\",\n          exitActive: \"animate__fadeOutDown\",\n        }}\n      >\n        {suggestions.map((suggestion) => (\n          <Suggestion key={suggestion[\"_id\"]} suggestionData={suggestion} />\n        ))}\n      </CSSTransition>\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}