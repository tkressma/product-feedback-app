{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/CommentSection/Replies/ReplyForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./ReplyForm.module.css\";\nimport Button from \"../../../UI/Button/Button\";\nimport { replyToComment } from \"../../../../actions/suggestions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReplyForm = _ref => {\n  _s();\n\n  let {\n    replyUser,\n    parentCommentId,\n    closeForm,\n    updateReplies\n  } = _ref;\n  const [reply, setReply] = useState(\"\");\n  const dispatch = useDispatch();\n  const {\n    id\n  } = useParams(); // Sends a reply to the back end, the refreshes the current suggestion's\n  // replys to be immediately displayed on the front end. Then, it closes\n  // reply text box.\n\n  const handleReplyComment = async e => {\n    e.preventDefault();\n    const newReplies = await dispatch(replyToComment(reply, replyUser, id, parentCommentId));\n    updateReplies(newReplies);\n    closeForm();\n  };\n\n  const handleReplyChange = e => {\n    setReply(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"add-reply\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.replyform,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: styles.replytext,\n        placeholder: `Replying to @${replyUser}`,\n        onChange: handleReplyChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        btnStyle: \"violet\",\n        form: \"add-reply\",\n        onClick: handleReplyComment,\n        text: \"Post Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"comment-error\",\n      className: styles[\"comment_charcount--empty-message\"],\n      children: \"Can't be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ReplyForm, \"2C1w6CUk8SnhDZjEP9SHd37xMQk=\", false, function () {\n  return [useDispatch, useParams];\n});\n\n_c = ReplyForm;\nexport default ReplyForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReplyForm\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/CommentSection/Replies/ReplyForm.js"],"names":["React","useState","useDispatch","useParams","styles","Button","replyToComment","ReplyForm","replyUser","parentCommentId","closeForm","updateReplies","reply","setReply","dispatch","id","handleReplyComment","e","preventDefault","newReplies","handleReplyChange","target","value","replyform","replytext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,cAAT,QAA+B,iCAA/B;;;AAEA,MAAMC,SAAS,GAAG,QAKZ;AAAA;;AAAA,MALa;AACjBC,IAAAA,SADiB;AAEjBC,IAAAA,eAFiB;AAGjBC,IAAAA,SAHiB;AAIjBC,IAAAA;AAJiB,GAKb;AACJ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMa,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAASZ,SAAS,EAAxB,CAHI,CAKJ;AACA;AACA;;AACA,QAAMa,kBAAkB,GAAG,MAAOC,CAAP,IAAa;AACtCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,UAAU,GAAG,MAAML,QAAQ,CAC/BR,cAAc,CAACM,KAAD,EAAQJ,SAAR,EAAmBO,EAAnB,EAAuBN,eAAvB,CADiB,CAAjC;AAIAE,IAAAA,aAAa,CAACQ,UAAD,CAAb;AACAT,IAAAA,SAAS;AACV,GARD;;AAUA,QAAMU,iBAAiB,GAAIH,CAAD,IAAO;AAC/BJ,IAAAA,QAAQ,CAACI,CAAC,CAACI,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAGA,sBACE;AAAM,IAAA,EAAE,EAAC,WAAT;AAAA,4BACE;AAAK,MAAA,SAAS,EAAElB,MAAM,CAACmB,SAAvB;AAAA,8BACE;AACE,QAAA,SAAS,EAAEnB,MAAM,CAACoB,SADpB;AAEE,QAAA,WAAW,EAAG,gBAAehB,SAAU,EAFzC;AAGE,QAAA,QAAQ,EAAEY;AAHZ;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,MAAD;AACE,QAAA,QAAQ,EAAC,QADX;AAEE,QAAA,IAAI,EAAC,WAFP;AAGE,QAAA,OAAO,EAAEJ,kBAHX;AAIE,QAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE;AACE,MAAA,EAAE,EAAC,eADL;AAEE,MAAA,SAAS,EAAEZ,MAAM,CAAC,kCAAD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAnDD;;GAAMG,S;UAOaL,W,EACFC,S;;;KARXI,S;AAqDN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./ReplyForm.module.css\";\nimport Button from \"../../../UI/Button/Button\";\nimport { replyToComment } from \"../../../../actions/suggestions\";\n\nconst ReplyForm = ({\n  replyUser,\n  parentCommentId,\n  closeForm,\n  updateReplies,\n}) => {\n  const [reply, setReply] = useState(\"\");\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  // Sends a reply to the back end, the refreshes the current suggestion's\n  // replys to be immediately displayed on the front end. Then, it closes\n  // reply text box.\n  const handleReplyComment = async (e) => {\n    e.preventDefault();\n    const newReplies = await dispatch(\n      replyToComment(reply, replyUser, id, parentCommentId)\n    );\n\n    updateReplies(newReplies);\n    closeForm();\n  };\n\n  const handleReplyChange = (e) => {\n    setReply(e.target.value);\n  };\n  return (\n    <form id=\"add-reply\">\n      <div className={styles.replyform}>\n        <textarea\n          className={styles.replytext}\n          placeholder={`Replying to @${replyUser}`}\n          onChange={handleReplyChange}\n        ></textarea>\n        <Button\n          btnStyle=\"violet\"\n          form=\"add-reply\"\n          onClick={handleReplyComment}\n          text=\"Post Reply\"\n        />\n      </div>\n      {/* If there is no text, display a message saying the comment can't be empty. */}\n\n      <p\n        id=\"comment-error\"\n        className={styles[\"comment_charcount--empty-message\"]}\n      >\n        Can't be empty\n      </p>\n    </form>\n  );\n};\n\nexport default ReplyForm;\n"]},"metadata":{},"sourceType":"module"}