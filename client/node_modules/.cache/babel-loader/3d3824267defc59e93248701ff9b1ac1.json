{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Edit/Edit.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { createSuggestion, getSuggestion } from \"../../actions/suggestions\";\nimport styles from \"./Edit.module.css\";\nimport Heading from \"../UI/Heading/Heading\";\nimport Form from \"../UI/Forms/Form/Form\";\nimport FormTextInput from \"../UI/Forms/FormTextInput/FormTextInput\";\nimport FormSelectInput from \"../UI/Forms/FormSelectInput/FormSelectInput\";\nimport editIcon from \"../../assets/shared/icon-edit-feedback.svg\";\nimport Button from \"../UI/Button/Button\";\nimport checkIcon from \"../../assets/shared/icon-check.svg\";\nimport { SpinnerCircularFixed } from \"spinners-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Edit() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    dispatch(getSuggestion(id));\n  }, [id]);\n  const {\n    post,\n    isLoading\n  } = useSelector(state => state.suggestions);\n  const [updatedSuggestion, setUpdatedSuggestion] = useState({\n    title: \"\",\n    category: \"Feature\",\n    status: \"suggestion\",\n    description: \"\"\n  });\n  const dispatch = useDispatch();\n  const navigate = useNavigate(); // Retrieve the data for the suggestion being edited\n\n  const [submitted, setSubmitted] = useState(false); // Did the user submit the form?\n\n  const user = JSON.parse(localStorage.getItem(\"profile\")); // If a user is not logged in upon trying to access this form,\n  // redirect them to sign in/sign up.\n\n  useEffect(() => {\n    var _user$result;\n\n    if (!(user !== null && user !== void 0 && (_user$result = user.result) !== null && _user$result !== void 0 && _user$result.name)) {\n      navigate(\"/auth\");\n    }\n  }); // Displays a loading circle if the api call is still processing.\n  // Once finished, it will display a check mark.\n\n  const submissionConfirmation = isLoading ? /*#__PURE__*/_jsxDEV(SpinnerCircularFixed, {\n    color: \"hsl(230, 76%, 59%)\",\n    secondaryColor: \"#f2f5ff\",\n    style: {\n      height: 43.98,\n      margin: \"0 auto\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n    src: checkIcon,\n    className: styles[\"loading--check\"],\n    alt: \"Checkmark - action is completed\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this); // After the feedback is added, wait 1.5 seconds before redirecting\n  // back to the home page.\n\n  useEffect(() => {\n    if (!isLoading && submitted) {\n      let timerFunc = setTimeout(() => navigate(\"/\"), 1500);\n      return () => clearTimeout(timerFunc);\n    }\n  });\n\n  const handleSubmit = event => {\n    var _user$result2, _user$result3, _user$result4;\n\n    event.preventDefault();\n    setSubmitted(true);\n    dispatch(createSuggestion({ ...updatedSuggestion,\n      category: updatedSuggestion.category.toLowerCase(),\n      // Category field must be lowercase before being added to the database.\n      name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name,\n      // Add full name to suggestion data\n      username: user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.username,\n      // Add username to suggestion data\n      upvotes: [`${user === null || user === void 0 ? void 0 : (_user$result4 = user.result) === null || _user$result4 === void 0 ? void 0 : _user$result4._id}`] // Automatically upvote the user's own post\n\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    icon: editIcon,\n    backButtonDestination: \"/\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      type: \"h1\",\n      children: \"Edit Your Feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(FormTextInput, {\n        inputId: \"title\",\n        value: updatedSuggestion.title,\n        labelHeading: \"Feedback Title\",\n        labelCaption: \"Add a short, descriptive headline\",\n        onChange: event => setUpdatedSuggestion({ ...updatedSuggestion,\n          title: event.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormSelectInput, {\n        inputId: \"category\",\n        value: updatedSuggestion.category,\n        labelHeading: \"Category\",\n        labelCaption: \"Choose a category for your feedback\",\n        onChange: event => setUpdatedSuggestion({ ...updatedSuggestion,\n          category: event.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormTextInput, {\n        inputId: \"detail\",\n        value: updatedSuggestion.description,\n        large: \"true\",\n        labelHeading: \"Feedback Detail\",\n        labelCaption: \"Include any specific comments on what should be improved, added, etc.\",\n        onChange: event => setUpdatedSuggestion({ ...updatedSuggestion,\n          description: event.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"button__container\"],\n        children: submitted ? submissionConfirmation : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            btnStyle: \"violet\",\n            text: \"Add Feedback\",\n            form: \"form\",\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            btnStyle: \"navy-blue\",\n            text: \"Cancel\",\n            onClick: handleSubmit,\n            link: true,\n            destination: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Edit, \"J1JucZvS0ndaUp2kP/Qgns0VE70=\", false, function () {\n  return [useParams, useSelector, useDispatch, useNavigate];\n});\n\n_c = Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Edit/Edit.js"],"names":["useEffect","useState","useDispatch","useSelector","useNavigate","useParams","createSuggestion","getSuggestion","styles","Heading","Form","FormTextInput","FormSelectInput","editIcon","Button","checkIcon","SpinnerCircularFixed","Edit","id","dispatch","post","isLoading","state","suggestions","updatedSuggestion","setUpdatedSuggestion","title","category","status","description","navigate","submitted","setSubmitted","user","JSON","parse","localStorage","getItem","result","name","submissionConfirmation","height","margin","timerFunc","setTimeout","clearTimeout","handleSubmit","event","preventDefault","toLowerCase","username","upvotes","_id","target","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { createSuggestion, getSuggestion } from \"../../actions/suggestions\";\nimport styles from \"./Edit.module.css\";\nimport Heading from \"../UI/Heading/Heading\";\nimport Form from \"../UI/Forms/Form/Form\";\nimport FormTextInput from \"../UI/Forms/FormTextInput/FormTextInput\";\nimport FormSelectInput from \"../UI/Forms/FormSelectInput/FormSelectInput\";\nimport editIcon from \"../../assets/shared/icon-edit-feedback.svg\";\nimport Button from \"../UI/Button/Button\";\nimport checkIcon from \"../../assets/shared/icon-check.svg\";\n\nimport { SpinnerCircularFixed } from \"spinners-react\";\n\nexport default function Edit() {\n  const { id } = useParams();\n  useEffect(() => {\n    dispatch(getSuggestion(id));\n  }, [id]);\n  const { post, isLoading } = useSelector((state) => state.suggestions);\n\n  const [updatedSuggestion, setUpdatedSuggestion] = useState({\n    title: \"\",\n    category: \"Feature\",\n    status: \"suggestion\",\n    description: \"\",\n  });\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // Retrieve the data for the suggestion being edited\n\n  const [submitted, setSubmitted] = useState(false); // Did the user submit the form?\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  // If a user is not logged in upon trying to access this form,\n  // redirect them to sign in/sign up.\n  useEffect(() => {\n    if (!user?.result?.name) {\n      navigate(\"/auth\");\n    }\n  });\n\n  // Displays a loading circle if the api call is still processing.\n  // Once finished, it will display a check mark.\n  const submissionConfirmation = isLoading ? (\n    <SpinnerCircularFixed\n      color=\"hsl(230, 76%, 59%)\"\n      secondaryColor=\"#f2f5ff\"\n      style={{ height: 43.98, margin: \"0 auto\" }}\n    />\n  ) : (\n    <img\n      src={checkIcon}\n      className={styles[\"loading--check\"]}\n      alt=\"Checkmark - action is completed\"\n    />\n  );\n\n  // After the feedback is added, wait 1.5 seconds before redirecting\n  // back to the home page.\n  useEffect(() => {\n    if (!isLoading && submitted) {\n      let timerFunc = setTimeout(() => navigate(\"/\"), 1500);\n      return () => clearTimeout(timerFunc);\n    }\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setSubmitted(true);\n\n    dispatch(\n      createSuggestion({\n        ...updatedSuggestion,\n        category: updatedSuggestion.category.toLowerCase(), // Category field must be lowercase before being added to the database.\n        name: user?.result?.name, // Add full name to suggestion data\n        username: user?.result?.username, // Add username to suggestion data\n        upvotes: [`${user?.result?._id}`], // Automatically upvote the user's own post\n      })\n    );\n  };\n\n  return (\n    <Form icon={editIcon} backButtonDestination=\"/\">\n      <Heading type=\"h1\">Edit Your Feedback</Heading>\n\n      <form id=\"form\">\n        <FormTextInput\n          inputId=\"title\"\n          value={updatedSuggestion.title}\n          labelHeading=\"Feedback Title\"\n          labelCaption=\"Add a short, descriptive headline\"\n          onChange={(event) =>\n            setUpdatedSuggestion({\n              ...updatedSuggestion,\n              title: event.target.value,\n            })\n          }\n        />\n        <FormSelectInput\n          inputId=\"category\"\n          value={updatedSuggestion.category}\n          labelHeading=\"Category\"\n          labelCaption=\"Choose a category for your feedback\"\n          onChange={(event) =>\n            setUpdatedSuggestion({\n              ...updatedSuggestion,\n              category: event.target.value,\n            })\n          }\n        />\n        <FormTextInput\n          inputId=\"detail\"\n          value={updatedSuggestion.description}\n          large=\"true\"\n          labelHeading=\"Feedback Detail\"\n          labelCaption=\"Include any specific comments on what should be improved, added, etc.\"\n          onChange={(event) =>\n            setUpdatedSuggestion({\n              ...updatedSuggestion,\n              description: event.target.value,\n            })\n          }\n        />\n\n        <div className={styles[\"button__container\"]}>\n          {submitted ? (\n            submissionConfirmation\n          ) : (\n            <>\n              <Button\n                btnStyle=\"violet\"\n                text=\"Add Feedback\"\n                form=\"form\"\n                onClick={handleSubmit}\n              />\n\n              <Button\n                btnStyle=\"navy-blue\"\n                text=\"Cancel\"\n                onClick={handleSubmit}\n                link={true}\n                destination=\"/\"\n              />\n            </>\n          )}\n        </div>\n      </form>\n    </Form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}