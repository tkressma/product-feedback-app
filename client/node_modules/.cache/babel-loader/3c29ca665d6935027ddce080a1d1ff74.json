{"ast":null,"code":"import _toConsumableArray from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/regenerator/index.js\";import{useState}from\"react\";import styles from\"./UpvoteButton.module.css\";import upvoteIcon from\"../../../../../../assets/shared/icon-arrow-up.svg\";import{useDispatch}from\"react-redux\";import{upvoteSuggestion}from\"../../../../../../actions/suggestions\";import{useNavigate}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UpvoteButton=function UpvoteButton(_ref){var _user$result;var upvotes=_ref.upvotes,id=_ref.id;var dispatch=useDispatch();var navigate=useNavigate();var user=JSON.parse(localStorage.getItem(\"profile\"));// Using state to instantly modify the upvote for a qucker feedback to improve user experience.\nvar _useState=useState(upvotes),_useState2=_slicedToArray(_useState,2),upvoteCount=_useState2[0],setUpvoteCount=_useState2[1];// Checks to see if the current user ID has already upvoted the post.\n// If the ID has not upvoted, add active styling to the upvote button.\n// Else, remove active styling.\nvar userId=(user===null||user===void 0?void 0:user.result.googleId)||(user===null||user===void 0?void 0:(_user$result=user.result)===null||_user$result===void 0?void 0:_user$result._id);var isUpvoted=upvoteCount.find(function(upvote){return upvote===userId;});var handleUpvote=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// If the user is not signed in, redirect to sign in/sign up\nif(!user){navigate(\"/auth\");}else{dispatch(upvoteSuggestion(id));if(isUpvoted){setUpvoteCount(upvotes.filter(function(upvoteId){return upvoteId!==userId;}));}else{setUpvoteCount([].concat(_toConsumableArray(upvotes),[userId]));}}case 1:case\"end\":return _context.stop();}}},_callee);}));return function handleUpvote(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"button\",{className:\"\".concat(styles.upvote,\" \").concat(isUpvoted&&styles[\"upvote--active\"]),onClick:handleUpvote,children:[/*#__PURE__*/_jsx(\"img\",{src:upvoteIcon,alt:\"Upvote arrow\",className:\"\".concat(styles[\"upvote__icon\"],\" \").concat(isUpvoted&&styles[\"upvote__icon--active\"])}),/*#__PURE__*/_jsx(\"span\",{children:upvoteCount.length})]});};export default UpvoteButton;","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsFeed/Suggestion/UpvoteButton/UpvoteButton.js"],"names":["useState","styles","upvoteIcon","useDispatch","upvoteSuggestion","useNavigate","UpvoteButton","upvotes","id","dispatch","navigate","user","JSON","parse","localStorage","getItem","upvoteCount","setUpvoteCount","userId","result","googleId","_id","isUpvoted","find","upvote","handleUpvote","filter","upvoteId","length"],"mappings":"uhBAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,MAAOC,CAAAA,MAAP,KAAmB,2BAAnB,CACA,MAAOC,CAAAA,UAAP,KAAuB,mDAAvB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,gBAAT,KAAiC,uCAAjC,CACA,OAASC,WAAT,KAA4B,kBAA5B,C,wFAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAqB,qBAAlBC,CAAAA,OAAkB,MAAlBA,OAAkB,CAATC,EAAS,MAATA,EAAS,CACxC,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CACA,GAAMO,CAAAA,QAAQ,CAAGL,WAAW,EAA5B,CAEA,GAAMM,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb,CAEA;AACA,cAAsCf,QAAQ,CAACO,OAAD,CAA9C,wCAAOS,WAAP,eAAoBC,cAApB,eAEA;AACA;AACA;AACA,GAAMC,CAAAA,MAAM,CAAG,CAAAP,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEQ,MAAN,CAAaC,QAAb,IAAyBT,IAAzB,SAAyBA,IAAzB,+BAAyBA,IAAI,CAAEQ,MAA/B,uCAAyB,aAAcE,GAAvC,CAAf,CACA,GAAMC,CAAAA,SAAS,CAAGN,WAAW,CAACO,IAAZ,CAAiB,SAACC,MAAD,QAAYA,CAAAA,MAAM,GAAKN,MAAvB,EAAjB,CAAlB,CAEA,GAAMO,CAAAA,YAAY,2FAAG,mIACnB;AACA,GAAI,CAACd,IAAL,CAAW,CACTD,QAAQ,CAAC,OAAD,CAAR,CACD,CAFD,IAEO,CACLD,QAAQ,CAACL,gBAAgB,CAACI,EAAD,CAAjB,CAAR,CAEA,GAAIc,SAAJ,CAAe,CACbL,cAAc,CAACV,OAAO,CAACmB,MAAR,CAAe,SAACC,QAAD,QAAcA,CAAAA,QAAQ,GAAKT,MAA3B,EAAf,CAAD,CAAd,CACD,CAFD,IAEO,CACLD,cAAc,8BAAKV,OAAL,GAAcW,MAAd,GAAd,CACD,CACF,CAZkB,sDAAH,kBAAZO,CAAAA,YAAY,2CAAlB,CAeA,mBACE,gBACE,SAAS,WAAKxB,MAAM,CAACuB,MAAZ,aAAsBF,SAAS,EAAIrB,MAAM,CAAC,gBAAD,CAAzC,CADX,CAEE,OAAO,CAAEwB,YAFX,wBAIE,YACE,GAAG,CAAEvB,UADP,CAEE,GAAG,CAAC,cAFN,CAGE,SAAS,WAAKD,MAAM,CAAC,cAAD,CAAX,aACPqB,SAAS,EAAIrB,MAAM,CAAC,sBAAD,CADZ,CAHX,EAJF,cAWE,sBAAOe,WAAW,CAACY,MAAnB,EAXF,GADF,CAeD,CA7CD,CA+CA,cAAetB,CAAAA,YAAf","sourcesContent":["import { useState } from \"react\";\nimport styles from \"./UpvoteButton.module.css\";\nimport upvoteIcon from \"../../../../../../assets/shared/icon-arrow-up.svg\";\nimport { useDispatch } from \"react-redux\";\nimport { upvoteSuggestion } from \"../../../../../../actions/suggestions\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst UpvoteButton = ({ upvotes, id }) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  // Using state to instantly modify the upvote for a qucker feedback to improve user experience.\n  const [upvoteCount, setUpvoteCount] = useState(upvotes);\n\n  // Checks to see if the current user ID has already upvoted the post.\n  // If the ID has not upvoted, add active styling to the upvote button.\n  // Else, remove active styling.\n  const userId = user?.result.googleId || user?.result?._id;\n  const isUpvoted = upvoteCount.find((upvote) => upvote === userId);\n\n  const handleUpvote = async () => {\n    // If the user is not signed in, redirect to sign in/sign up\n    if (!user) {\n      navigate(\"/auth\");\n    } else {\n      dispatch(upvoteSuggestion(id));\n\n      if (isUpvoted) {\n        setUpvoteCount(upvotes.filter((upvoteId) => upvoteId !== userId));\n      } else {\n        setUpvoteCount([...upvotes, userId]);\n      }\n    }\n  };\n\n  return (\n    <button\n      className={`${styles.upvote} ${isUpvoted && styles[\"upvote--active\"]}`}\n      onClick={handleUpvote}\n    >\n      <img\n        src={upvoteIcon}\n        alt=\"Upvote arrow\"\n        className={`${styles[\"upvote__icon\"]} ${\n          isUpvoted && styles[\"upvote__icon--active\"]\n        }`}\n      />\n      <span>{upvoteCount.length}</span>\n    </button>\n  );\n};\n\nexport default UpvoteButton;\n"]},"metadata":{},"sourceType":"module"}