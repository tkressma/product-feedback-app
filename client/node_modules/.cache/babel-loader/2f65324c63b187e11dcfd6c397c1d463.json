{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/UI/Forms/FormSelectInput/FormSelectInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from \"../FormInput.module.css\";\nimport downArrowIcon from \"../../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../../assets/shared/icon-check.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FormSelectInput(_ref) {\n  _s();\n\n  let {\n    inputId,\n    value = \"feature\",\n    labelHeading,\n    labelCaption,\n    onChange,\n    isStatus = false\n  } = _ref;\n  const categories = [\"Feature\", \"UI\", \"UX\", \"Enhancement\", \"Bug\"];\n  const status = [\"Suggestion\", \"Planned\", \"In-Progress\", \"Live\"];\n  let inputOptions = isStatus ? status : categories;\n  const [selectedOption, setSelectedOption] = useState(`${isStatus ? \"Suggestion\" : \"Feature\"}`);\n\n  const handleDropDown = event => {\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleOptionSelection = event => {\n    setMenuOpen(false); // Close the dropdown menu\n\n    setSelectedOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      className: styles[\"caption-bold\"],\n      children: labelHeading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: inputId,\n      className: styles.caption,\n      children: labelCaption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"bar__listbox\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"bar__sort_options\"],\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"sort_label\",\n          children: \"Sort by :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDropDown,\n          \"aria-haspopup\": \"listbox\",\n          \"aria-expanded\": \"false\",\n          \"aria-labelledby\": \"sort_label\",\n          children: selectedOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: downArrowIcon,\n          className: `${styles.menuarrow} ${menuOpen && styles[\"menuarrow--active\"]}`,\n          alt: `${menuOpen ? \"Down\" : \"Up\"} arrow`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles[\"bar__dropdown\"]} ${menuOpen && styles[\"bar__dropdown--active\"]}`,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          role: \"listbox\",\n          \"aria-labelledby\": \"sort_label\",\n          children: inputOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: styles[\"bar__listitem\"],\n            \"aria-selected\": selectedOption === option ? true : false,\n            role: \"option\",\n            tabIndex: \"0\",\n            onClick: handleOptionSelection,\n            onKeyPress: handleOptionSelection,\n            children: [option, selectedOption === option && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: checkIcon,\n              alt: \"Checkmark\",\n              className: styles[\"bar__listitem_checkmark\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(FormSelectInput, \"NHhPqnZuZ1J0Xz3sah+CPfiQ0rk=\");\n\n_c = FormSelectInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormSelectInput\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/UI/Forms/FormSelectInput/FormSelectInput.js"],"names":["React","useState","styles","downArrowIcon","checkIcon","FormSelectInput","inputId","value","labelHeading","labelCaption","onChange","isStatus","categories","status","inputOptions","selectedOption","setSelectedOption","handleDropDown","event","setMenuOpen","menuOpen","target","setAttribute","handleOptionSelection","innerText","caption","menuarrow","map","option","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"../FormInput.module.css\";\nimport downArrowIcon from \"../../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../../assets/shared/icon-check.svg\";\nexport default function FormSelectInput({\n  inputId,\n  value = \"feature\",\n  labelHeading,\n  labelCaption,\n  onChange,\n  isStatus = false,\n}) {\n  const categories = [\"Feature\", \"UI\", \"UX\", \"Enhancement\", \"Bug\"];\n  const status = [\"Suggestion\", \"Planned\", \"In-Progress\", \"Live\"];\n\n  let inputOptions = isStatus ? status : categories;\n  const [selectedOption, setSelectedOption] = useState(\n    `${isStatus ? \"Suggestion\" : \"Feature\"}`\n  );\n\n  const handleDropDown = (event) => {\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleOptionSelection = (event) => {\n    setMenuOpen(false); // Close the dropdown menu\n    setSelectedOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n  };\n\n  return (\n    <>\n      <label htmlFor={inputId} className={styles[\"caption-bold\"]}>\n        {labelHeading}\n      </label>\n      <label htmlFor={inputId} className={styles.caption}>\n        {labelCaption}\n      </label>\n      <div className={styles[\"bar__listbox\"]}>\n        {/* Container for the label, the dropdown button, and the up/down arrow */}\n        <div className={styles[\"bar__sort_options\"]}>\n          <span id=\"sort_label\">Sort by :</span>\n          <button\n            onClick={handleDropDown}\n            aria-haspopup=\"listbox\"\n            aria-expanded=\"false\"\n            aria-labelledby=\"sort_label\"\n          >\n            {selectedOption}\n          </button>\n          <img\n            src={downArrowIcon}\n            className={`${styles.menuarrow} ${\n              menuOpen && styles[\"menuarrow--active\"]\n            }`}\n            alt={`${menuOpen ? \"Down\" : \"Up\"} arrow`}\n          />\n        </div>\n\n        {/* Dropdown pop up */}\n        <div\n          className={`${styles[\"bar__dropdown\"]} ${\n            menuOpen && styles[\"bar__dropdown--active\"]\n          }`}\n        >\n          <ul role=\"listbox\" aria-labelledby=\"sort_label\">\n            {inputOptions.map((option, index) => (\n              <li\n                key={index}\n                className={styles[\"bar__listitem\"]}\n                aria-selected={selectedOption === option ? true : false}\n                role=\"option\"\n                tabIndex=\"0\"\n                onClick={handleOptionSelection}\n                onKeyPress={handleOptionSelection}\n              >\n                {/* Option text */}\n                {option}\n\n                {/* If a list item is currently selected, display a checkmark */}\n                {selectedOption === option && (\n                  <img\n                    src={checkIcon}\n                    alt=\"Checkmark\"\n                    className={styles[\"bar__listitem_checkmark\"]}\n                  />\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}