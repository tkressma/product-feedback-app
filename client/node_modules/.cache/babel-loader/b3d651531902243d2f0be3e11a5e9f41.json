{"ast":null,"code":"import _asyncToGenerator from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState}from\"react\";import{useDispatch}from\"react-redux\";import{useParams}from\"react-router-dom\";import styles from\"./ReplyForm.module.css\";import Button from\"../../../../../../UI/Button/Button\";import{replyToComment}from\"../../../../../../../actions/suggestions\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ReplyForm=function ReplyForm(_ref){var replyUser=_ref.replyUser,parentCommentId=_ref.parentCommentId,closeForm=_ref.closeForm,updateReplies=_ref.updateReplies;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),reply=_useState2[0],setReply=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isEmpty=_useState4[0],setIsEmpty=_useState4[1];var dispatch=useDispatch();var _useParams=useParams(),id=_useParams.id;// If a reply is valid, this sends a reply to the back end, the refreshes the current suggestion's\n// replys to be immediately displayed on the front end. Then, it closes reply text box.\nvar handleReplyComment=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var newReplies;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();if(reply.length===0)setIsEmpty(true);if(!(reply.length!==0)){_context.next=8;break;}_context.next=5;return dispatch(replyToComment(reply,replyUser,id,parentCommentId));case 5:newReplies=_context.sent;updateReplies(newReplies);// Refresh the replies to reflect the newly added reply\ncloseForm();// Close the reply form\ncase 8:case\"end\":return _context.stop();}}},_callee);}));return function handleReplyComment(_x){return _ref2.apply(this,arguments);};}();var handleReplyChange=function handleReplyChange(e){setReply(e.target.value);setIsEmpty(false);// If the comment is empty, and a user types something, update the empty state to be false.\n};return/*#__PURE__*/_jsxs(\"form\",{id:\"add-reply\",className:styles.replyform,children:[/*#__PURE__*/_jsx(\"textarea\",{className:\"\".concat(styles.replytext,\" \").concat(isEmpty&&styles[\"replytext--error\"]),placeholder:\"Replying to @\".concat(replyUser),onChange:handleReplyChange}),isEmpty&&/*#__PURE__*/_jsx(\"p\",{className:styles[\"replytext--error-message\"],children:\"Can't be empty\"}),/*#__PURE__*/_jsx(Button,{btnStyle:!isEmpty?\"violet\":\"disabled\",form:\"add-reply\",onClick:handleReplyComment,text:\"Post Reply\"})]});};export default ReplyForm;","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/SuggestionPage/CommentSection/Comments/Comment/Replies/ReplyForm/ReplyForm.js"],"names":["React","useState","useDispatch","useParams","styles","Button","replyToComment","ReplyForm","replyUser","parentCommentId","closeForm","updateReplies","reply","setReply","isEmpty","setIsEmpty","dispatch","id","handleReplyComment","e","preventDefault","length","newReplies","handleReplyChange","target","value","replyform","replytext"],"mappings":"4YAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,MAAP,KAAmB,wBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oCAAnB,CACA,OAASC,cAAT,KAA+B,0CAA/B,C,wFAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAKZ,IAJJC,CAAAA,SAII,MAJJA,SAII,CAHJC,eAGI,MAHJA,eAGI,CAFJC,SAEI,MAFJA,SAEI,CADJC,aACI,MADJA,aACI,CACJ,cAA0BV,QAAQ,CAAC,EAAD,CAAlC,wCAAOW,KAAP,eAAcC,QAAd,eACA,eAA8BZ,QAAQ,CAAC,KAAD,CAAtC,yCAAOa,OAAP,eAAgBC,UAAhB,eACA,GAAMC,CAAAA,QAAQ,CAAGd,WAAW,EAA5B,CACA,eAAeC,SAAS,EAAxB,CAAQc,EAAR,YAAQA,EAAR,CAEA;AACA;AACA,GAAMC,CAAAA,kBAAkB,2FAAG,iBAAOC,CAAP,iIACzBA,CAAC,CAACC,cAAF,GAEA,GAAIR,KAAK,CAACS,MAAN,GAAiB,CAArB,CAAwBN,UAAU,CAAC,IAAD,CAAV,CAHC,KAKrBH,KAAK,CAACS,MAAN,GAAiB,CALI,gDAMEL,CAAAA,QAAQ,CAC/BV,cAAc,CAACM,KAAD,CAAQJ,SAAR,CAAmBS,EAAnB,CAAuBR,eAAvB,CADiB,CANV,QAMjBa,UANiB,eASvBX,aAAa,CAACW,UAAD,CAAb,CAA2B;AAC3BZ,SAAS,GAAI;AAVU,sDAAH,kBAAlBQ,CAAAA,kBAAkB,6CAAxB,CAcA,GAAMK,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACJ,CAAD,CAAO,CAC/BN,QAAQ,CAACM,CAAC,CAACK,MAAF,CAASC,KAAV,CAAR,CACAV,UAAU,CAAC,KAAD,CAAV,CAAmB;AACpB,CAHD,CAKA,mBACE,cAAM,EAAE,CAAC,WAAT,CAAqB,SAAS,CAAEX,MAAM,CAACsB,SAAvC,wBACE,iBACE,SAAS,WAAKtB,MAAM,CAACuB,SAAZ,aACPb,OAAO,EAAIV,MAAM,CAAC,kBAAD,CADV,CADX,CAIE,WAAW,wBAAkBI,SAAlB,CAJb,CAKE,QAAQ,CAAEe,iBALZ,EADF,CAQGT,OAAO,eACN,UAAG,SAAS,CAAEV,MAAM,CAAC,0BAAD,CAApB,4BATJ,cAWE,KAAC,MAAD,EACE,QAAQ,CAAE,CAACU,OAAD,CAAW,QAAX,CAAsB,UADlC,CAEE,IAAI,CAAC,WAFP,CAGE,OAAO,CAAEI,kBAHX,CAIE,IAAI,CAAC,YAJP,EAXF,GADF,CAoBD,CApDD,CAsDA,cAAeX,CAAAA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./ReplyForm.module.css\";\nimport Button from \"../../../../../../UI/Button/Button\";\nimport { replyToComment } from \"../../../../../../../actions/suggestions\";\n\nconst ReplyForm = ({\n  replyUser,\n  parentCommentId,\n  closeForm,\n  updateReplies,\n}) => {\n  const [reply, setReply] = useState(\"\");\n  const [isEmpty, setIsEmpty] = useState(false);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  // If a reply is valid, this sends a reply to the back end, the refreshes the current suggestion's\n  // replys to be immediately displayed on the front end. Then, it closes reply text box.\n  const handleReplyComment = async (e) => {\n    e.preventDefault();\n\n    if (reply.length === 0) setIsEmpty(true);\n\n    if (reply.length !== 0) {\n      const newReplies = await dispatch(\n        replyToComment(reply, replyUser, id, parentCommentId)\n      );\n      updateReplies(newReplies); // Refresh the replies to reflect the newly added reply\n      closeForm(); // Close the reply form\n    }\n  };\n\n  const handleReplyChange = (e) => {\n    setReply(e.target.value);\n    setIsEmpty(false); // If the comment is empty, and a user types something, update the empty state to be false.\n  };\n\n  return (\n    <form id=\"add-reply\" className={styles.replyform}>\n      <textarea\n        className={`${styles.replytext} ${\n          isEmpty && styles[\"replytext--error\"]\n        }`}\n        placeholder={`Replying to @${replyUser}`}\n        onChange={handleReplyChange}\n      />\n      {isEmpty && (\n        <p className={styles[\"replytext--error-message\"]}>Can't be empty</p>\n      )}\n      <Button\n        btnStyle={!isEmpty ? \"violet\" : \"disabled\"}\n        form=\"add-reply\"\n        onClick={handleReplyComment}\n        text=\"Post Reply\"\n      />\n    </form>\n  );\n};\n\nexport default ReplyForm;\n"]},"metadata":{},"sourceType":"module"}