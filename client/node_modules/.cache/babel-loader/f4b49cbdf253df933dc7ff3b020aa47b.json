{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsFeed/SuggestionsFeed.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./SuggestionsFeed.module.css\";\nimport { useSelector } from \"react-redux\";\nimport Suggestion from \"./Suggestion/Suggestion\";\nimport NoSuggestions from \"./NoSuggestions.js/NoSuggestions\";\nimport { SpinnerCircularFixed } from \"spinners-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SuggestionsFeed() {\n  _s();\n\n  // Retrieves all of the suggestions\n  const {\n    suggestions,\n    isLoading\n  } = useSelector(state => state.suggestions); // If there is one or more suggestions in the state array and the api\n  // request has finished loading, then there are suggestions available to display\n\n  const suggestionsAvailable = suggestions.length !== 0; // If there are no suggestions, apply different styling to the section\n\n  const suggestionFeedStyling = suggestionsAvailable ? styles.suggestions : styles[\"suggetions--empty\"]; // Dynamically create all suggestion components to be rendered on the page\n\n  const suggestionCards = suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Suggestion, {\n    suggestionData: suggestion\n  }, suggestion[\"_id\"], false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this)); // As long as there are suggestions, display all of the available suggestion components.\n  // If isLoading is true, display a loading symbol.\n  // If suggestionsAvailable is false, display the no suggestions component.\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SpinnerCircularFixed, {\n      enabled: isLoading,\n      color: \"hsl(230, 76%, 59%)\",\n      secondaryColor: \"#f2f5ff\",\n      size: 100,\n      style: {\n        display: \"block\",\n        margin: \"4rem auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: suggestionFeedStyling,\n      children: suggestionsAvailable ? !isLoading && suggestionCards : !isLoading && /*#__PURE__*/_jsxDEV(NoSuggestions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SuggestionsFeed, \"tSoLze1YfFxzuysLpCCqJqMqVdQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuggestionsFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestionsFeed\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsFeed/SuggestionsFeed.js"],"names":["styles","useSelector","Suggestion","NoSuggestions","SpinnerCircularFixed","SuggestionsFeed","suggestions","isLoading","state","suggestionsAvailable","length","suggestionFeedStyling","suggestionCards","map","suggestion","display","margin"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,8BAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,SAASC,oBAAT,QAAqC,gBAArC;;;AAEA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AACxC;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA6BN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACF,WAAlB,CAA9C,CAFwC,CAIxC;AACA;;AACA,QAAMG,oBAAoB,GAAGH,WAAW,CAACI,MAAZ,KAAuB,CAApD,CANwC,CAQxC;;AACA,QAAMC,qBAAqB,GAAGF,oBAAoB,GAC9CT,MAAM,CAACM,WADuC,GAE9CN,MAAM,CAAC,mBAAD,CAFV,CATwC,CAaxC;;AACA,QAAMY,eAAe,GAAGN,WAAW,CAACO,GAAZ,CAAiBC,UAAD,iBACtC,QAAC,UAAD;AAAoC,IAAA,cAAc,EAAEA;AAApD,KAAiBA,UAAU,CAAC,KAAD,CAA3B;AAAA;AAAA;AAAA;AAAA,UADsB,CAAxB,CAdwC,CAkBxC;AACA;AACA;;AACA,sBACE;AAAA,4BACE,QAAC,oBAAD;AACE,MAAA,OAAO,EAAEP,SADX;AAEE,MAAA,KAAK,EAAC,oBAFR;AAGE,MAAA,cAAc,EAAC,SAHjB;AAIE,MAAA,IAAI,EAAE,GAJR;AAKE,MAAA,KAAK,EAAE;AACLQ,QAAAA,OAAO,EAAE,OADJ;AAELC,QAAAA,MAAM,EAAE;AAFH;AALT;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAS,MAAA,SAAS,EAAEL,qBAApB;AAAA,gBACGF,oBAAoB,GACjB,CAACF,SAAD,IAAcK,eADG,GAEjB,CAACL,SAAD,iBAAc,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAHpB;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,kBADF;AAmBD;;GAxCuBF,e;UAEaJ,W;;;KAFbI,e","sourcesContent":["import styles from \"./SuggestionsFeed.module.css\";\nimport { useSelector } from \"react-redux\";\nimport Suggestion from \"./Suggestion/Suggestion\";\nimport NoSuggestions from \"./NoSuggestions.js/NoSuggestions\";\nimport { SpinnerCircularFixed } from \"spinners-react\";\n\nexport default function SuggestionsFeed() {\n  // Retrieves all of the suggestions\n  const { suggestions, isLoading } = useSelector((state) => state.suggestions);\n\n  // If there is one or more suggestions in the state array and the api\n  // request has finished loading, then there are suggestions available to display\n  const suggestionsAvailable = suggestions.length !== 0;\n\n  // If there are no suggestions, apply different styling to the section\n  const suggestionFeedStyling = suggestionsAvailable\n    ? styles.suggestions\n    : styles[\"suggetions--empty\"];\n\n  // Dynamically create all suggestion components to be rendered on the page\n  const suggestionCards = suggestions.map((suggestion) => (\n    <Suggestion key={suggestion[\"_id\"]} suggestionData={suggestion} />\n  ));\n\n  // As long as there are suggestions, display all of the available suggestion components.\n  // If isLoading is true, display a loading symbol.\n  // If suggestionsAvailable is false, display the no suggestions component.\n  return (\n    <>\n      <SpinnerCircularFixed\n        enabled={isLoading}\n        color=\"hsl(230, 76%, 59%)\"\n        secondaryColor=\"#f2f5ff\"\n        size={100}\n        style={{\n          display: \"block\",\n          margin: \"4rem auto\",\n        }}\n      />\n      <section className={suggestionFeedStyling}>\n        {suggestionsAvailable\n          ? !isLoading && suggestionCards\n          : !isLoading && <NoSuggestions />}\n      </section>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}