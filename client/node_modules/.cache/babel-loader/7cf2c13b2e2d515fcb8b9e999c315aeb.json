{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsFeed/SuggestionsFeed.js\",\n    _s = $RefreshSig$();\n\nimport styles from \"./SuggestionsFeed.module.css\";\nimport { useSelector } from \"react-redux\";\nimport Suggestion from \"./Suggestion/Suggestion\";\nimport NoSuggestions from \"./NoSuggestions.js/NoSuggestions\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SuggestionsFeed() {\n  _s();\n\n  // Retrieves all of the suggestions\n  const {\n    suggestions,\n    isLoading\n  } = useSelector(state => state.suggestions); // If there is one or more suggestions in the state array and the api\n  // request has finished loading, then there are suggestions available to display\n\n  const suggestionsAvailable = suggestions.length !== 0 && !isLoading; // If there are no suggestions, apply different styling to the section\n\n  const suggestionFeedStyling = suggestionsAvailable ? styles.suggestions : styles[\"suggetions--empty\"]; // Dynamically create all suggestion components to be rendered on the page\n\n  const suggestionCards = suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(Suggestion, {\n    suggestionData: suggestion\n  }, suggestion[\"_id\"], false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this)); // As long as there are suggestions, display all of the available suggestion components.\n  // If isLoading is true, display a loading symbol.\n  // If suggestionsAvailable is false, display the no suggestions component.\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: suggestionFeedStyling,\n    children: [/*#__PURE__*/_jsxDEV(PulseLoader, {\n      color: \"#ad1fea\",\n      loading: isLoading,\n      size: \"15\",\n      margin: \"0 auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), suggestionsAvailable ? suggestionCards : /*#__PURE__*/_jsxDEV(NoSuggestions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 49\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SuggestionsFeed, \"tSoLze1YfFxzuysLpCCqJqMqVdQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuggestionsFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestionsFeed\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsFeed/SuggestionsFeed.js"],"names":["styles","useSelector","Suggestion","NoSuggestions","PulseLoader","SuggestionsFeed","suggestions","isLoading","state","suggestionsAvailable","length","suggestionFeedStyling","suggestionCards","map","suggestion"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,8BAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAEA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AACxC;AACA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA6BN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACF,WAAlB,CAA9C,CAFwC,CAIxC;AACA;;AACA,QAAMG,oBAAoB,GAAGH,WAAW,CAACI,MAAZ,KAAuB,CAAvB,IAA4B,CAACH,SAA1D,CANwC,CAQxC;;AACA,QAAMI,qBAAqB,GAAGF,oBAAoB,GAC9CT,MAAM,CAACM,WADuC,GAE9CN,MAAM,CAAC,mBAAD,CAFV,CATwC,CAaxC;;AACA,QAAMY,eAAe,GAAGN,WAAW,CAACO,GAAZ,CAAiBC,UAAD,iBACtC,QAAC,UAAD;AAAoC,IAAA,cAAc,EAAEA;AAApD,KAAiBA,UAAU,CAAC,KAAD,CAA3B;AAAA;AAAA;AAAA;AAAA,UADsB,CAAxB,CAdwC,CAkBxC;AACA;AACA;;AACA,sBACE;AAAS,IAAA,SAAS,EAAEH,qBAApB;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,OAAO,EAAEJ,SAFX;AAGE,MAAA,IAAI,EAAC,IAHP;AAIE,MAAA,MAAM,EAAC;AAJT;AAAA;AAAA;AAAA;AAAA,YADF,EAQGE,oBAAoB,GAAGG,eAAH,gBAAqB,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAR5C;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAjCuBP,e;UAEaJ,W;;;KAFbI,e","sourcesContent":["import styles from \"./SuggestionsFeed.module.css\";\nimport { useSelector } from \"react-redux\";\nimport Suggestion from \"./Suggestion/Suggestion\";\nimport NoSuggestions from \"./NoSuggestions.js/NoSuggestions\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nexport default function SuggestionsFeed() {\n  // Retrieves all of the suggestions\n  const { suggestions, isLoading } = useSelector((state) => state.suggestions);\n\n  // If there is one or more suggestions in the state array and the api\n  // request has finished loading, then there are suggestions available to display\n  const suggestionsAvailable = suggestions.length !== 0 && !isLoading;\n\n  // If there are no suggestions, apply different styling to the section\n  const suggestionFeedStyling = suggestionsAvailable\n    ? styles.suggestions\n    : styles[\"suggetions--empty\"];\n\n  // Dynamically create all suggestion components to be rendered on the page\n  const suggestionCards = suggestions.map((suggestion) => (\n    <Suggestion key={suggestion[\"_id\"]} suggestionData={suggestion} />\n  ));\n\n  // As long as there are suggestions, display all of the available suggestion components.\n  // If isLoading is true, display a loading symbol.\n  // If suggestionsAvailable is false, display the no suggestions component.\n  return (\n    <section className={suggestionFeedStyling}>\n      <PulseLoader\n        color=\"#ad1fea\"\n        loading={isLoading}\n        size=\"15\"\n        margin=\"0 auto\"\n      />\n\n      {suggestionsAvailable ? suggestionCards : <NoSuggestions />}\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}