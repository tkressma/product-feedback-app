{"ast":null,"code":"import { FETCH_ALL, FETCH_FILTERED, FETCH_SUGGESTION, CREATE_SUGGESTION, DELETE_SUGGESTION, UPVOTE, START_LOADING, END_LOADING, CHANGE_FILTERS } from \"../constants/actionTypes\";\nimport * as api from \"../api\"; // Action Creators - Must use redux thunk since we are working with asynchronous data\n// Returns all suggestions\n\nexport const getSuggestions = () => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchSuggestions();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getSuggestion = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchSuggestion(id);\n    dispatch({\n      type: FETCH_SUGGESTION,\n      payload: {\n        suggestion: data\n      }\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createSuggestion = newSuggestion => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createSuggestion(newSuggestion);\n    dispatch({\n      type: CREATE_SUGGESTION,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deleteSuggestion = id => async dispatch => {\n  try {\n    await api.deleteSuggestion(id);\n    dispatch({\n      type: DELETE_SUGGESTION,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; // Returns suggestions that meet filter criteria (category, type, and order)\n// Category - All, UI, UX, Enhancement, Bug, Feature\n// Type - Upvotes or Comments\n// Order - Ascending (Least) or Descending (Most)\n\nexport const filterSuggestions = _ref => {\n  let {\n    category,\n    type,\n    order\n  } = _ref;\n  return async dispatch => {\n    try {\n      dispatch({\n        type: START_LOADING\n      });\n      const {\n        data\n      } = await api.fetchFilteredSuggestions(category, type, order);\n      dispatch({\n        type: FETCH_FILTERED,\n        payload: data\n      });\n      dispatch({\n        type: END_LOADING\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}; // Updates the filters currently selected by the user. This allows for\n// the search to work synchronously despite being in two seperate components.\n// Category component - SuggestionTag.js\n// Upvotes and Comments sort component - SuggestionsBar.js\n\nexport const setFilters = filters => async dispatch => {\n  dispatch({\n    type: CHANGE_FILTERS,\n    payload: filters\n  });\n};\nexport const upvoteSuggestion = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.upvoteSuggestion(id);\n    dispatch({\n      type: UPVOTE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/actions/suggestions.js"],"names":["FETCH_ALL","FETCH_FILTERED","FETCH_SUGGESTION","CREATE_SUGGESTION","DELETE_SUGGESTION","UPVOTE","START_LOADING","END_LOADING","CHANGE_FILTERS","api","getSuggestions","dispatch","type","data","fetchSuggestions","payload","error","console","log","message","getSuggestion","id","fetchSuggestion","suggestion","createSuggestion","newSuggestion","deleteSuggestion","filterSuggestions","category","order","fetchFilteredSuggestions","setFilters","filters","upvoteSuggestion"],"mappings":"AAAA,SACEA,SADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,MANF,EAOEC,aAPF,EAQEC,WARF,EASEC,cATF,QAUO,0BAVP;AAWA,OAAO,KAAKC,GAAZ,MAAqB,QAArB,C,CAEA;AAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACtD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMJ,GAAG,CAACK,gBAAJ,EAAvB;AACAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ,SAAR;AAAmBe,MAAAA,OAAO,EAAEF;AAA5B,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOS,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CATM;AAWP,OAAO,MAAMC,aAAa,GAAIC,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AACvD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMJ,GAAG,CAACa,eAAJ,CAAoBD,EAApB,CAAvB;AAEAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV,gBAAR;AAA0Ba,MAAAA,OAAO,EAAE;AAAEQ,QAAAA,UAAU,EAAEV;AAAd;AAAnC,KAAD,CAAR;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CATM;AAWP,OAAO,MAAMK,gBAAgB,GAAIC,aAAD,IAAmB,MAAOd,QAAP,IAAoB;AACrE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMJ,GAAG,CAACe,gBAAJ,CAAqBC,aAArB,CAAvB;AACAd,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,iBAAR;AAA2BY,MAAAA,OAAO,EAAEF;AAApC,KAAD,CAAR;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOS,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CATM;AAWP,OAAO,MAAMO,gBAAgB,GAAIL,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAMF,GAAG,CAACiB,gBAAJ,CAAqBL,EAArB,CAAN;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,iBAAR;AAA2BW,MAAAA,OAAO,EAAEM;AAApC,KAAD,CAAR;AACD,GAHD,CAGE,OAAOL,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAPM,C,CASP;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,iBAAiB,GAC5B;AAAA,MAAC;AAAEC,IAAAA,QAAF;AAAYhB,IAAAA,IAAZ;AAAkBiB,IAAAA;AAAlB,GAAD;AAAA,SACA,MAAOlB,QAAP,IAAoB;AAClB,QAAI;AACFA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEN;AAAR,OAAD,CAAR;AAEA,YAAM;AAAEO,QAAAA;AAAF,UAAW,MAAMJ,GAAG,CAACqB,wBAAJ,CACrBF,QADqB,EAErBhB,IAFqB,EAGrBiB,KAHqB,CAAvB;AAMAlB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEX,cAAR;AAAwBc,QAAAA,OAAO,EAAEF;AAAjC,OAAD,CAAR;AACAF,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEL;AAAR,OAAD,CAAR;AACD,KAXD,CAWE,OAAOS,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,GAhBD;AAAA,CADK,C,CAmBP;AACA;AACA;AACA;;AACA,OAAO,MAAMY,UAAU,GAAIC,OAAD,IAAa,MAAOrB,QAAP,IAAoB;AACzDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEJ,cAAR;AAAwBO,IAAAA,OAAO,EAAEiB;AAAjC,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAIZ,EAAD,IAAQ,MAAOV,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAMJ,GAAG,CAACwB,gBAAJ,CAAqBZ,EAArB,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,MAAR;AAAgBU,MAAAA,OAAO,EAAEF;AAAzB,KAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAPM","sourcesContent":["import {\n  FETCH_ALL,\n  FETCH_FILTERED,\n  FETCH_SUGGESTION,\n  CREATE_SUGGESTION,\n  DELETE_SUGGESTION,\n  UPVOTE,\n  START_LOADING,\n  END_LOADING,\n  CHANGE_FILTERS,\n} from \"../constants/actionTypes\";\nimport * as api from \"../api\";\n\n// Action Creators - Must use redux thunk since we are working with asynchronous data\n\n// Returns all suggestions\nexport const getSuggestions = () => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchSuggestions();\n    dispatch({ type: FETCH_ALL, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getSuggestion = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.fetchSuggestion(id);\n\n    dispatch({ type: FETCH_SUGGESTION, payload: { suggestion: data } });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const createSuggestion = (newSuggestion) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createSuggestion(newSuggestion);\n    dispatch({ type: CREATE_SUGGESTION, payload: data });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const deleteSuggestion = (id) => async (dispatch) => {\n  try {\n    await api.deleteSuggestion(id);\n    dispatch({ type: DELETE_SUGGESTION, payload: id });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// Returns suggestions that meet filter criteria (category, type, and order)\n// Category - All, UI, UX, Enhancement, Bug, Feature\n// Type - Upvotes or Comments\n// Order - Ascending (Least) or Descending (Most)\nexport const filterSuggestions =\n  ({ category, type, order }) =>\n  async (dispatch) => {\n    try {\n      dispatch({ type: START_LOADING });\n\n      const { data } = await api.fetchFilteredSuggestions(\n        category,\n        type,\n        order\n      );\n\n      dispatch({ type: FETCH_FILTERED, payload: data });\n      dispatch({ type: END_LOADING });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n// Updates the filters currently selected by the user. This allows for\n// the search to work synchronously despite being in two seperate components.\n// Category component - SuggestionTag.js\n// Upvotes and Comments sort component - SuggestionsBar.js\nexport const setFilters = (filters) => async (dispatch) => {\n  dispatch({ type: CHANGE_FILTERS, payload: filters });\n};\n\nexport const upvoteSuggestion = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.upvoteSuggestion(id);\n    dispatch({ type: UPVOTE, payload: data });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}