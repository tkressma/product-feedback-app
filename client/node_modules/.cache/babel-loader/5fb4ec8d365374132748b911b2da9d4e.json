{"ast":null,"code":"import _slicedToArray from\"/home/tom/Desktop/product-feedback-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";import{useSelector,useDispatch}from\"react-redux\";import{filterSuggestions,setFilters}from\"../../../../actions/suggestions\";import{useMediaQuery}from\"react-responsive\";import styles from\"./SuggestionsBar.module.css\";import Button from\"../../../UI/Button/Button\";import Heading from\"../../../UI/Heading/Heading\";import bulbIcon from\"../../../../assets/suggestions/icon-suggestions.svg\";import downArrowIcon from\"../../../../assets/shared/icon-arrow-down.svg\";import checkIcon from\"../../../../assets/shared/icon-check.svg\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function SuggestionsBar(){var isMobile=useMediaQuery({query:\"(max-width: 767px)\"});var sortingOptions=[\"Most Upvotes\",\"Least Upvotes\",\"Most Comments\",\"Least Comments\"];var _useState=useState(\"Most Upvotes\"),_useState2=_slicedToArray(_useState,2),sortingOption=_useState2[0],setSortingOption=_useState2[1];// Retrieves all of the suggestions and filters that are selected\nvar _useSelector=useSelector(function(state){return state.suggestions;}),suggestions=_useSelector.suggestions,_useSelector$filters=_useSelector.filters,sortCategory=_useSelector$filters.sortCategory,sortType=_useSelector$filters.sortType,sortOrder=_useSelector$filters.sortOrder;var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),menuOpen=_useState4[0],setMenuOpen=_useState4[1];var dispatch=useDispatch();// Sort by Most Upvotes on component mount\nuseEffect(function(){dispatch(filterSuggestions({category:\"All\",type:\"upvotes\",order:\"desc\"}));},[]);// Listen for each time a new sorting option is selected and update state\nuseEffect(function(){// Determine the sort order (ascending/descending) and type (upvotes/comments)\nvar order=sortingOption.includes(\"Most\")?\"desc\":\"asc\";var type=sortingOption.includes(\"Upvotes\")?\"upvotes\":\"comments\";// Update the sorting filters\ndispatch(setFilters({sortCategory:sortCategory,sortType:type,sortOrder:order}));// Sort data depending on order (most/least) and type(upvotes/comments)\ndispatch(filterSuggestions({category:sortCategory,type:sortType,order:sortOrder}));},[sortingOption,sortCategory,sortType,sortOrder,dispatch]);var handleDropDown=function handleDropDown(event){setMenuOpen(!menuOpen);// Toggle the dropdown menu\nevent.target.setAttribute(\"aria-expanded\",menuOpen);// Toggle aria-expanded label for accessibility\n};var handleSortSelection=function handleSortSelection(event){setMenuOpen(false);// Close the dropdown menu\nsetSortingOption(event.target.innerText);// Set the sorting option to user selection (E.G. \"Least Upvotes\")\n};// Displays how many suggestions are available on screen sizes larger than 768px\nvar suggestionCount=!isMobile&&/*#__PURE__*/_jsxs(Heading,{type:\"h3\",white:true,children:[/*#__PURE__*/_jsx(\"img\",{src:bulbIcon,alt:\"Light bulb signifying an idea\"}),suggestions.length,\" Suggestions\"]});return/*#__PURE__*/_jsxs(\"section\",{className:\"\".concat(styles.bar,\" \").concat(isMobile&&styles[\"bar--sticky\"]),children:[suggestionCount,/*#__PURE__*/_jsxs(\"div\",{className:styles[\"bar__listbox\"],children:[/*#__PURE__*/_jsxs(\"div\",{className:styles[\"bar__sort_options\"],children:[/*#__PURE__*/_jsx(\"span\",{id:\"sort_label\",children:\"Sort by :\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleDropDown,\"aria-haspopup\":\"listbox\",\"aria-expanded\":\"false\",\"aria-labelledby\":\"sort_label\",children:sortingOption}),/*#__PURE__*/_jsx(\"img\",{src:downArrowIcon,className:\"\".concat(styles.menuarrow,\" \").concat(menuOpen&&styles[\"menuarrow--active\"]),alt:\"\".concat(menuOpen?\"Down\":\"Up\",\" arrow\")})]}),/*#__PURE__*/_jsx(\"div\",{className:\"\".concat(styles[\"bar__dropdown\"],\" \").concat(menuOpen&&styles[\"bar__dropdown--active\"]),children:/*#__PURE__*/_jsx(\"ul\",{role:\"listbox\",\"aria-labelledby\":\"sort_label\",children:sortingOptions.map(function(option,index){return/*#__PURE__*/_jsxs(\"li\",{className:styles[\"bar__listitem\"],\"aria-selected\":sortingOption===option?true:false,role:\"option\",tabIndex:\"0\",onClick:handleSortSelection,onKeyPress:handleSortSelection,children:[option,sortingOption===option&&/*#__PURE__*/_jsx(\"img\",{src:checkIcon,alt:\"Checkmark\",className:styles[\"bar__listitem_checkmark\"]})]},index);})})})]}),/*#__PURE__*/_jsx(Button,{btnStyle:\"violet\",text:\"+ Add Feedback\",link:true,destination:\"create-feedback\"})]});}","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsBar/SuggestionsBar.js"],"names":["useState","useEffect","useSelector","useDispatch","filterSuggestions","setFilters","useMediaQuery","styles","Button","Heading","bulbIcon","downArrowIcon","checkIcon","SuggestionsBar","isMobile","query","sortingOptions","sortingOption","setSortingOption","state","suggestions","filters","sortCategory","sortType","sortOrder","menuOpen","setMenuOpen","dispatch","category","type","order","includes","handleDropDown","event","target","setAttribute","handleSortSelection","innerText","suggestionCount","length","bar","menuarrow","map","option","index"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterSuggestions, setFilters } from \"../../../../actions/suggestions\";\nimport { useMediaQuery } from \"react-responsive\";\nimport styles from \"./SuggestionsBar.module.css\";\nimport Button from \"../../../UI/Button/Button\";\nimport Heading from \"../../../UI/Heading/Heading\";\nimport bulbIcon from \"../../../../assets/suggestions/icon-suggestions.svg\";\nimport downArrowIcon from \"../../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../../assets/shared/icon-check.svg\";\n\nexport default function SuggestionsBar() {\n  const isMobile = useMediaQuery({ query: \"(max-width: 767px)\" });\n  const sortingOptions = [\n    \"Most Upvotes\",\n    \"Least Upvotes\",\n    \"Most Comments\",\n    \"Least Comments\",\n  ];\n  const [sortingOption, setSortingOption] = useState(\"Most Upvotes\");\n\n  // Retrieves all of the suggestions and filters that are selected\n  const {\n    suggestions,\n    filters: { sortCategory, sortType, sortOrder },\n  } = useSelector((state) => state.suggestions);\n\n  const [menuOpen, setMenuOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  // Sort by Most Upvotes on component mount\n  useEffect(() => {\n    dispatch(\n      filterSuggestions({\n        category: \"All\",\n        type: \"upvotes\",\n        order: \"desc\",\n      })\n    );\n  }, []);\n\n  // Listen for each time a new sorting option is selected and update state\n  useEffect(() => {\n    // Determine the sort order (ascending/descending) and type (upvotes/comments)\n    const order = sortingOption.includes(\"Most\") ? \"desc\" : \"asc\";\n    const type = sortingOption.includes(\"Upvotes\") ? \"upvotes\" : \"comments\";\n\n    // Update the sorting filters\n    dispatch(\n      setFilters({\n        sortCategory: sortCategory,\n        sortType: type,\n        sortOrder: order,\n      })\n    );\n\n    // Sort data depending on order (most/least) and type(upvotes/comments)\n    dispatch(\n      filterSuggestions({\n        category: sortCategory,\n        type: sortType,\n        order: sortOrder,\n      })\n    );\n  }, [sortingOption, sortCategory, sortType, sortOrder, dispatch]);\n\n  const handleDropDown = (event) => {\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleSortSelection = (event) => {\n    setMenuOpen(false); // Close the dropdown menu\n    setSortingOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n  };\n\n  // Displays how many suggestions are available on screen sizes larger than 768px\n  const suggestionCount = !isMobile && (\n    <Heading type=\"h3\" white={true}>\n      <img src={bulbIcon} alt=\"Light bulb signifying an idea\" />\n      {suggestions.length} Suggestions\n    </Heading>\n  );\n\n  return (\n    <section className={`${styles.bar} ${isMobile && styles[\"bar--sticky\"]}`}>\n      {suggestionCount}\n\n      <div className={styles[\"bar__listbox\"]}>\n        {/* Container for the label, the dropdown button, and the up/down arrow */}\n        <div className={styles[\"bar__sort_options\"]}>\n          <span id=\"sort_label\">Sort by :</span>\n          <button\n            onClick={handleDropDown}\n            aria-haspopup=\"listbox\"\n            aria-expanded=\"false\"\n            aria-labelledby=\"sort_label\"\n          >\n            {sortingOption}\n          </button>\n          <img\n            src={downArrowIcon}\n            className={`${styles.menuarrow} ${\n              menuOpen && styles[\"menuarrow--active\"]\n            }`}\n            alt={`${menuOpen ? \"Down\" : \"Up\"} arrow`}\n          />\n        </div>\n\n        {/* Dropdown pop up */}\n        <div\n          className={`${styles[\"bar__dropdown\"]} ${\n            menuOpen && styles[\"bar__dropdown--active\"]\n          }`}\n        >\n          <ul role=\"listbox\" aria-labelledby=\"sort_label\">\n            {sortingOptions.map((option, index) => (\n              <li\n                key={index}\n                className={styles[\"bar__listitem\"]}\n                aria-selected={sortingOption === option ? true : false}\n                role=\"option\"\n                tabIndex=\"0\"\n                onClick={handleSortSelection}\n                onKeyPress={handleSortSelection}\n              >\n                {/* Option text */}\n                {option}\n\n                {/* If a list item is currently selected, display a checkmark */}\n                {sortingOption === option && (\n                  <img\n                    src={checkIcon}\n                    alt=\"Checkmark\"\n                    className={styles[\"bar__listitem_checkmark\"]}\n                  />\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <Button\n        btnStyle=\"violet\"\n        text=\"+ Add Feedback\"\n        link={true}\n        destination=\"create-feedback\"\n      />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}