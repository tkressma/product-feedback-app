{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsBar/SuggestionsBar.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterSuggestions, setFilters } from \"../../../../actions/suggestions\";\nimport { useMediaQuery } from \"react-responsive\";\nimport styles from \"./SuggestionsBar.module.css\";\nimport Button from \"../../../UI/Button/Button\";\nimport Heading from \"../../../UI/Heading/Heading\";\nimport bulbIcon from \"../../../../assets/suggestions/icon-suggestions.svg\";\nimport downArrowIcon from \"../../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../../assets/shared/icon-check.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SuggestionsBar() {\n  _s();\n\n  const isMobile = useMediaQuery({\n    query: \"(max-width: 767px)\"\n  });\n  const sortingOptions = [\"Most Upvotes\", \"Least Upvotes\", \"Most Comments\", \"Least Comments\"];\n  const [sortingOption, setSortingOption] = useState(\"Most Upvotes\"); // Retrieves all of the suggestions\n\n  const {\n    suggestions\n  } = useSelector(state => state.suggestions);\n  console.log(\"tesst: \" + suggestions); // Retrieves all of the filters that are selected\n\n  const {\n    sortCategory,\n    sortType,\n    sortOrder\n  } = useSelector(state => state.filters);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const dispatch = useDispatch(); // Sort by Most Upvotes on component mount\n\n  useEffect(() => {\n    dispatch(filterSuggestions({\n      category: \"all\",\n      type: \"upvotes\",\n      order: \"desc\"\n    }));\n  }, []); // Listen for each time a new sorting option is selected and update state\n\n  useEffect(() => {\n    // Determine the sort order (ascending/descending) and type (upvotes/comments)\n    const order = sortingOption.includes(\"Most\") ? \"desc\" : \"asc\";\n    const type = sortingOption.includes(\"Upvotes\") ? \"upvotes\" : \"comments\"; // Update the sorting filters\n\n    dispatch(setFilters({\n      sortCategory: sortCategory,\n      sortType: type,\n      sortOrder: order\n    })); // Sort data depending on order (most/least) and type(upvotes/comments)\n\n    dispatch(filterSuggestions({\n      category: sortCategory,\n      type: sortType,\n      order: sortOrder\n    }));\n  }, [sortingOption, sortCategory, sortType, sortOrder, dispatch]);\n\n  const handleDropDown = event => {\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleSortSelection = event => {\n    setMenuOpen(false); // Close the dropdown menu\n\n    setSortingOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n  }; // Displays how many suggestions are available on screen sizes larger than 768px\n\n\n  const suggestionCount = !isMobile && /*#__PURE__*/_jsxDEV(Heading, {\n    type: \"h3\",\n    white: true,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: bulbIcon,\n      alt: \"Light bulb signifying an idea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: `${styles.bar} ${isMobile && styles[\"bar--sticky\"]}`,\n    children: [suggestionCount, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"bar__listbox\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles[\"bar__sort_options\"],\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"sort_label\",\n          children: \"Sort by :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDropDown,\n          \"aria-haspopup\": \"listbox\",\n          \"aria-expanded\": \"false\",\n          \"aria-labelledby\": \"sort_label\",\n          children: sortingOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: downArrowIcon,\n          className: `${styles.menuarrow} ${menuOpen && styles[\"menuarrow--active\"]}`,\n          alt: `${menuOpen ? \"Down\" : \"Up\"} arrow`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles[\"bar__dropdown\"]} ${menuOpen && styles[\"bar__dropdown--active\"]}`,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          role: \"listbox\",\n          \"aria-labelledby\": \"sort_label\",\n          children: sortingOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: styles[\"bar__listitem\"],\n            \"aria-selected\": sortingOption === option ? true : false,\n            role: \"option\",\n            tabIndex: \"0\",\n            onClick: handleSortSelection,\n            onKeyPress: handleSortSelection,\n            children: [option, sortingOption === option && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: checkIcon,\n              alt: \"Checkmark\",\n              className: styles[\"bar__listitem_checkmark\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      style: \"violet\",\n      text: \"+ Add Feedback\",\n      link: true,\n      destination: \"create-feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SuggestionsBar, \"4u+9nt1YbGl/nx/0GEG4kDbYkW4=\", false, function () {\n  return [useMediaQuery, useSelector, useSelector, useDispatch];\n});\n\n_c = SuggestionsBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestionsBar\");","map":{"version":3,"sources":["/home/tom/Desktop/product-feedback-app/client/src/components/Home/Main/SuggestionsBar/SuggestionsBar.js"],"names":["useState","useEffect","useSelector","useDispatch","filterSuggestions","setFilters","useMediaQuery","styles","Button","Heading","bulbIcon","downArrowIcon","checkIcon","SuggestionsBar","isMobile","query","sortingOptions","sortingOption","setSortingOption","suggestions","state","console","log","sortCategory","sortType","sortOrder","filters","menuOpen","setMenuOpen","dispatch","category","type","order","includes","handleDropDown","event","target","setAttribute","handleSortSelection","innerText","suggestionCount","bar","menuarrow","map","option","index"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterSuggestions, setFilters } from \"../../../../actions/suggestions\";\nimport { useMediaQuery } from \"react-responsive\";\nimport styles from \"./SuggestionsBar.module.css\";\nimport Button from \"../../../UI/Button/Button\";\nimport Heading from \"../../../UI/Heading/Heading\";\nimport bulbIcon from \"../../../../assets/suggestions/icon-suggestions.svg\";\nimport downArrowIcon from \"../../../../assets/shared/icon-arrow-down.svg\";\nimport checkIcon from \"../../../../assets/shared/icon-check.svg\";\n\nexport default function SuggestionsBar() {\n  const isMobile = useMediaQuery({ query: \"(max-width: 767px)\" });\n  const sortingOptions = [\n    \"Most Upvotes\",\n    \"Least Upvotes\",\n    \"Most Comments\",\n    \"Least Comments\",\n  ];\n  const [sortingOption, setSortingOption] = useState(\"Most Upvotes\");\n\n  // Retrieves all of the suggestions\n  const { suggestions } = useSelector((state) => state.suggestions);\n  console.log(\"tesst: \" + suggestions);\n  // Retrieves all of the filters that are selected\n  const { sortCategory, sortType, sortOrder } = useSelector(\n    (state) => state.filters\n  );\n\n  const [menuOpen, setMenuOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  // Sort by Most Upvotes on component mount\n  useEffect(() => {\n    dispatch(\n      filterSuggestions({\n        category: \"all\",\n        type: \"upvotes\",\n        order: \"desc\",\n      })\n    );\n  }, []);\n\n  // Listen for each time a new sorting option is selected and update state\n  useEffect(() => {\n    // Determine the sort order (ascending/descending) and type (upvotes/comments)\n    const order = sortingOption.includes(\"Most\") ? \"desc\" : \"asc\";\n    const type = sortingOption.includes(\"Upvotes\") ? \"upvotes\" : \"comments\";\n\n    // Update the sorting filters\n    dispatch(\n      setFilters({\n        sortCategory: sortCategory,\n        sortType: type,\n        sortOrder: order,\n      })\n    );\n\n    // Sort data depending on order (most/least) and type(upvotes/comments)\n    dispatch(\n      filterSuggestions({\n        category: sortCategory,\n        type: sortType,\n        order: sortOrder,\n      })\n    );\n  }, [sortingOption, sortCategory, sortType, sortOrder, dispatch]);\n\n  const handleDropDown = (event) => {\n    setMenuOpen(!menuOpen); // Toggle the dropdown menu\n    event.target.setAttribute(\"aria-expanded\", menuOpen); // Toggle aria-expanded label for accessibility\n  };\n\n  const handleSortSelection = (event) => {\n    setMenuOpen(false); // Close the dropdown menu\n    setSortingOption(event.target.innerText); // Set the sorting option to user selection (E.G. \"Least Upvotes\")\n  };\n\n  // Displays how many suggestions are available on screen sizes larger than 768px\n  const suggestionCount = !isMobile && (\n    <Heading type=\"h3\" white={true}>\n      <img src={bulbIcon} alt=\"Light bulb signifying an idea\" />\n    </Heading>\n  );\n\n  return (\n    <section className={`${styles.bar} ${isMobile && styles[\"bar--sticky\"]}`}>\n      {suggestionCount}\n\n      <div className={styles[\"bar__listbox\"]}>\n        {/* Container for the label, the dropdown button, and the up/down arrow */}\n        <div className={styles[\"bar__sort_options\"]}>\n          <span id=\"sort_label\">Sort by :</span>\n          <button\n            onClick={handleDropDown}\n            aria-haspopup=\"listbox\"\n            aria-expanded=\"false\"\n            aria-labelledby=\"sort_label\"\n          >\n            {sortingOption}\n          </button>\n          <img\n            src={downArrowIcon}\n            className={`${styles.menuarrow} ${\n              menuOpen && styles[\"menuarrow--active\"]\n            }`}\n            alt={`${menuOpen ? \"Down\" : \"Up\"} arrow`}\n          />\n        </div>\n\n        {/* Dropdown pop up */}\n        <div\n          className={`${styles[\"bar__dropdown\"]} ${\n            menuOpen && styles[\"bar__dropdown--active\"]\n          }`}\n        >\n          <ul role=\"listbox\" aria-labelledby=\"sort_label\">\n            {sortingOptions.map((option, index) => (\n              <li\n                key={index}\n                className={styles[\"bar__listitem\"]}\n                aria-selected={sortingOption === option ? true : false}\n                role=\"option\"\n                tabIndex=\"0\"\n                onClick={handleSortSelection}\n                onKeyPress={handleSortSelection}\n              >\n                {/* Option text */}\n                {option}\n\n                {/* If a list item is currently selected, display a checkmark */}\n                {sortingOption === option && (\n                  <img\n                    src={checkIcon}\n                    alt=\"Checkmark\"\n                    className={styles[\"bar__listitem_checkmark\"]}\n                  />\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <Button\n        style=\"violet\"\n        text=\"+ Add Feedback\"\n        link={true}\n        destination=\"create-feedback\"\n      />\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}